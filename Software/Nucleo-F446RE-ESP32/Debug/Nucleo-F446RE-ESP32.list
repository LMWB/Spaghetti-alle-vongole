
Nucleo-F446RE-ESP32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800529c  0800529c  0000629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a4  080052a4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080052ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000068  08005314  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  08005314  00007930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b08d  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b5  00000000  00000000  00012125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  000143e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ce  00000000  00000000  00014cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d75  00000000  00000000  000153c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9c1  00000000  00000000  0003813b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cafe6  00000000  00000000  00044afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  0010fb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001126c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005180 	.word	0x08005180

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005180 	.word	0x08005180

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_DMA_Init+0x68>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a16      	ldr	r2, [pc, #88]	@ (8000608 <MX_DMA_Init+0x68>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_DMA_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2010      	movs	r0, #16
 80005e4:	f000 fdbf 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f000 fdd8 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	203a      	movs	r0, #58	@ 0x3a
 80005f4:	f000 fdb7 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005f8:	203a      	movs	r0, #58	@ 0x3a
 80005fa:	f000 fdd0 	bl	800119e <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b2d      	ldr	r3, [pc, #180]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a2c      	ldr	r2, [pc, #176]	@ (80006dc <MX_GPIO_Init+0xd0>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b2a      	ldr	r3, [pc, #168]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a25      	ldr	r2, [pc, #148]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_GPIO_Init+0xd0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <MX_GPIO_Init+0xd4>)
 8000698:	f001 fb32 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_GPIO_Init+0xd8>)
 80006b4:	f001 f990 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_GPIO_Init+0xd4>)
 80006d0:	f001 f982 	bl	80019d8 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020800 	.word	0x40020800

080006e8 <noRTOS_setup>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void noRTOS_setup(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	UART_INTERNET_READ_BYTE_IRQ( &uart1_rx_buffer[buffer_haed] );
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <noRTOS_setup+0x30>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <noRTOS_setup+0x34>)
 80006f4:	4413      	add	r3, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <noRTOS_setup+0x38>)
 80006fc:	f002 f9dd 	bl	8002aba <HAL_UART_Receive_IT>
	UART_TERMINAL_READ_LINE_IRQ( uart2_rx_buffer, uart_rx_buffer_size);
 8000700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000704:	4907      	ldr	r1, [pc, #28]	@ (8000724 <noRTOS_setup+0x3c>)
 8000706:	4808      	ldr	r0, [pc, #32]	@ (8000728 <noRTOS_setup+0x40>)
 8000708:	f002 f9fc 	bl	8002b04 <HAL_UARTEx_ReceiveToIdle_DMA>
	printf("activate UART Read Byte\n");
 800070c:	4807      	ldr	r0, [pc, #28]	@ (800072c <noRTOS_setup+0x44>)
 800070e:	f003 fcfd 	bl	800410c <puts>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000484 	.word	0x20000484
 800071c:	20000284 	.word	0x20000284
 8000720:	2000048c 	.word	0x2000048c
 8000724:	20000084 	.word	0x20000084
 8000728:	200004d4 	.word	0x200004d4
 800072c:	08005198 	.word	0x08005198

08000730 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	if (huart->Instance == UART_TERMINAL_INSTANCE){

	}

	if (huart->Instance == UART_INTERNET_INSTANCE){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <HAL_UART_RxCpltCallback+0xb8>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d14e      	bne.n	80007e0 <HAL_UART_RxCpltCallback+0xb0>
		//printf("received 1 byte raw data: %02X head at %d \n", uart1_rx_buffer[buffer_haed], buffer_haed);
		char b[8];
		uint8_t s = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	75fb      	strb	r3, [r7, #23]
		s = sprintf(b, "%02X ", uart1_rx_buffer[buffer_haed]);
 8000746:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <HAL_UART_RxCpltCallback+0xc0>)
 800074e:	5c9b      	ldrb	r3, [r3, r2]
 8000750:	461a      	mov	r2, r3
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4927      	ldr	r1, [pc, #156]	@ (80007f4 <HAL_UART_RxCpltCallback+0xc4>)
 8000758:	4618      	mov	r0, r3
 800075a:	f003 fcdf 	bl	800411c <siprintf>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
		UART_SEND_TERMINAL((uint8_t*)b, s);
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	b29a      	uxth	r2, r3
 8000766:	f107 010c 	add.w	r1, r7, #12
 800076a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076e:	4822      	ldr	r0, [pc, #136]	@ (80007f8 <HAL_UART_RxCpltCallback+0xc8>)
 8000770:	f002 f918 	bl	80029a4 <HAL_UART_Transmit>

		if( 	   uart1_rx_buffer[buffer_haed] == 0x01
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <HAL_UART_RxCpltCallback+0xc0>)
 800077c:	5c9b      	ldrb	r3, [r3, r2]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d117      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x82>
				&& uart1_rx_buffer[buffer_haed-1] == 0x01
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a19      	ldr	r2, [pc, #100]	@ (80007f0 <HAL_UART_RxCpltCallback+0xc0>)
 800078a:	5cd3      	ldrb	r3, [r2, r3]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d110      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x82>
				&& uart1_rx_buffer[buffer_haed-2] == 0x1B
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	3b02      	subs	r3, #2
 8000796:	4a16      	ldr	r2, [pc, #88]	@ (80007f0 <HAL_UART_RxCpltCallback+0xc0>)
 8000798:	5cd3      	ldrb	r3, [r2, r3]
 800079a:	2b1b      	cmp	r3, #27
 800079c:	d109      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x82>
				&& uart1_rx_buffer[buffer_haed-3] == 0x1B){
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	3b03      	subs	r3, #3
 80007a4:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <HAL_UART_RxCpltCallback+0xc0>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	2b1b      	cmp	r3, #27
 80007aa:	d102      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x82>
			printf("\t HIT \n");
 80007ac:	4813      	ldr	r0, [pc, #76]	@ (80007fc <HAL_UART_RxCpltCallback+0xcc>)
 80007ae:	f003 fcad 	bl	800410c <puts>
		}

		buffer_haed++;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 80007bc:	801a      	strh	r2, [r3, #0]
		buffer_haed = buffer_haed & 0x1FF;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 80007ca:	801a      	strh	r2, [r3, #0]

		UART_INTERNET_READ_BYTE_IRQ( &uart1_rx_buffer[buffer_haed] );
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <HAL_UART_RxCpltCallback+0xbc>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <HAL_UART_RxCpltCallback+0xc0>)
 80007d4:	4413      	add	r3, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	4809      	ldr	r0, [pc, #36]	@ (8000800 <HAL_UART_RxCpltCallback+0xd0>)
 80007dc:	f002 f96d 	bl	8002aba <HAL_UART_Receive_IT>
	}
}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40011000 	.word	0x40011000
 80007ec:	20000484 	.word	0x20000484
 80007f0:	20000284 	.word	0x20000284
 80007f4:	080051b0 	.word	0x080051b0
 80007f8:	200004d4 	.word	0x200004d4
 80007fc:	080051b8 	.word	0x080051b8
 8000800:	2000048c 	.word	0x2000048c

08000804 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == UART_TERMINAL_INSTANCE){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <HAL_UARTEx_RxEventCallback+0x44>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d108      	bne.n	800082c <HAL_UARTEx_RxEventCallback+0x28>
		printf("---- NEW LINE ---- \n");
 800081a:	480c      	ldr	r0, [pc, #48]	@ (800084c <HAL_UARTEx_RxEventCallback+0x48>)
 800081c:	f003 fc76 	bl	800410c <puts>
		UART_TERMINAL_READ_LINE_IRQ(uart2_rx_buffer, uart_rx_buffer_size);
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	490a      	ldr	r1, [pc, #40]	@ (8000850 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <HAL_UARTEx_RxEventCallback+0x50>)
 8000828:	f002 f96c 	bl	8002b04 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

	if (huart->Instance == UART_INTERNET_INSTANCE){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a09      	ldr	r2, [pc, #36]	@ (8000858 <HAL_UARTEx_RxEventCallback+0x54>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d104      	bne.n	8000840 <HAL_UARTEx_RxEventCallback+0x3c>
		printf("received %d byte raw data\n", Size);
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	4619      	mov	r1, r3
 800083a:	4808      	ldr	r0, [pc, #32]	@ (800085c <HAL_UARTEx_RxEventCallback+0x58>)
 800083c:	f003 fbfe 	bl	800403c <iprintf>
	}
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	080051c0 	.word	0x080051c0
 8000850:	20000084 	.word	0x20000084
 8000854:	200004d4 	.word	0x200004d4
 8000858:	40011000 	.word	0x40011000
 800085c:	080051d4 	.word	0x080051d4

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fb0e 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f810 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff fece 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 8000870:	f7ff fe96 	bl	80005a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f9c2 	bl	8000bfc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000878:	f000 f996 	bl	8000ba8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  noRTOS_run_scheduler();
 800087c:	f003 fad0 	bl	8003e20 <noRTOS_run_scheduler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("Hello from AT-Command Handler on ESP32\n");
	  DELAY(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000884:	f000 fb70 	bl	8000f68 <HAL_Delay>
 8000888:	e7fa      	b.n	8000880 <main+0x20>
	...

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	@ 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2234      	movs	r2, #52	@ 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fd36 	bl	800430c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <SystemClock_Config+0xd4>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	4a29      	ldr	r2, [pc, #164]	@ (8000960 <SystemClock_Config+0xd4>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <SystemClock_Config+0xd4>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <SystemClock_Config+0xd8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d8:	4a22      	ldr	r2, [pc, #136]	@ (8000964 <SystemClock_Config+0xd8>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <SystemClock_Config+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000900:	2310      	movs	r3, #16
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000904:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000908:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800090a:	2304      	movs	r3, #4
 800090c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fd54 	bl	80023c8 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000926:	f000 f81f 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2102      	movs	r1, #2
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f9f4 	bl	8001d34 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000952:	f000 f809 	bl	8000968 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	@ 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000988:	6453      	str	r3, [r2, #68]	@ 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b2:	2007      	movs	r0, #7
 80009b4:	f000 fbcc 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 fa85 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <DMA1_Stream5_IRQHandler+0x10>)
 8000a2a:	f000 fd6b 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000057c 	.word	0x2000057c

08000a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <USART1_IRQHandler+0x10>)
 8000a3e:	f002 f8bf 	bl	8002bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000048c 	.word	0x2000048c

08000a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <USART2_IRQHandler+0x10>)
 8000a52:	f002 f8b5 	bl	8002bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200004d4 	.word	0x200004d4

08000a60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <DMA2_Stream2_IRQHandler+0x10>)
 8000a66:	f000 fd4d 	bl	8001504 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000051c 	.word	0x2000051c

08000a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e00a      	b.n	8000a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a86:	f3af 8000 	nop.w
 8000a8a:	4601      	mov	r1, r0
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf0      	blt.n	8000a86 <_read+0x12>
  }

  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_isatty>:

int _isatty(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f003 fc2e 	bl	80043a8 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20020000 	.word	0x20020000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	20000488 	.word	0x20000488
 8000b80:	20000930 	.word	0x20000930

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_USART1_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_USART1_UART_Init+0x4c>)
 8000be0:	f001 fe90 	bl	8002904 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f7ff febd 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000048c 	.word	0x2000048c
 8000bf8:	40011000 	.word	0x40011000

08000bfc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f001 fe66 	bl	8002904 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff fe93 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200004d4 	.word	0x200004d4
 8000c4c:	40004400 	.word	0x40004400

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a68      	ldr	r2, [pc, #416]	@ (8000e10 <HAL_UART_MspInit+0x1c0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d163      	bne.n	8000d3a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	4b67      	ldr	r3, [pc, #412]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a66      	ldr	r2, [pc, #408]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b64      	ldr	r3, [pc, #400]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	4b60      	ldr	r3, [pc, #384]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a5f      	ldr	r2, [pc, #380]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000caa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4854      	ldr	r0, [pc, #336]	@ (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000cc8:	f000 fe86 	bl	80019d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ccc:	4b53      	ldr	r3, [pc, #332]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cce:	4a54      	ldr	r2, [pc, #336]	@ (8000e20 <HAL_UART_MspInit+0x1d0>)
 8000cd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cd2:	4b52      	ldr	r3, [pc, #328]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cd4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b50      	ldr	r3, [pc, #320]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cee:	4b4b      	ldr	r3, [pc, #300]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf4:	4b49      	ldr	r3, [pc, #292]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cfa:	4b48      	ldr	r3, [pc, #288]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d00:	4b46      	ldr	r3, [pc, #280]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d06:	4b45      	ldr	r3, [pc, #276]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d0c:	4843      	ldr	r0, [pc, #268]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000d0e:	f000 fa61 	bl	80011d4 <HAL_DMA_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d18:	f7ff fe26 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000d20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d22:	4a3e      	ldr	r2, [pc, #248]	@ (8000e1c <HAL_UART_MspInit+0x1cc>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2025      	movs	r0, #37	@ 0x25
 8000d2e:	f000 fa1a 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d32:	2025      	movs	r0, #37	@ 0x25
 8000d34:	f000 fa33 	bl	800119e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d38:	e066      	b.n	8000e08 <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a39      	ldr	r2, [pc, #228]	@ (8000e24 <HAL_UART_MspInit+0x1d4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d161      	bne.n	8000e08 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	4a31      	ldr	r2, [pc, #196]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d68:	4a2a      	ldr	r2, [pc, #168]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <HAL_UART_MspInit+0x1c4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4820      	ldr	r0, [pc, #128]	@ (8000e18 <HAL_UART_MspInit+0x1c8>)
 8000d98:	f000 fe1e 	bl	80019d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000d9e:	4a23      	ldr	r2, [pc, #140]	@ (8000e2c <HAL_UART_MspInit+0x1dc>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000da4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000da8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ddc:	4812      	ldr	r0, [pc, #72]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000dde:	f000 f9f9 	bl	80011d4 <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000de8:	f7ff fdbe 	bl	8000968 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000df0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000df2:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <HAL_UART_MspInit+0x1d8>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2026      	movs	r0, #38	@ 0x26
 8000dfe:	f000 f9b2 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e02:	2026      	movs	r0, #38	@ 0x26
 8000e04:	f000 f9cb 	bl	800119e <HAL_NVIC_EnableIRQ>
}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	@ 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	2000051c 	.word	0x2000051c
 8000e20:	40026440 	.word	0x40026440
 8000e24:	40004400 	.word	0x40004400
 8000e28:	2000057c 	.word	0x2000057c
 8000e2c:	40026088 	.word	0x40026088

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff fea6 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f003 faa9 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fcfd 	bl	8000860 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e74:	080052ac 	.word	0x080052ac
  ldr r2, =_sbss
 8000e78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e7c:	20000930 	.word	0x20000930

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fd5c 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200005dc 	.word	0x200005dc

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200005dc 	.word	0x200005dc

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff feb6 	bl	8000f50 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e099      	b.n	8001324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001210:	e00f      	b.n	8001232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001212:	f7ff fe9d 	bl	8000f50 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b05      	cmp	r3, #5
 800121e:	d908      	bls.n	8001232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e078      	b.n	8001324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e8      	bne.n	8001212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <HAL_DMA_Init+0x158>)
 800124c:	4013      	ands	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4313      	orrs	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	2b04      	cmp	r3, #4
 800128a:	d107      	bne.n	800129c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	4313      	orrs	r3, r2
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f023 0307 	bic.w	r3, r3, #7
 80012b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d117      	bne.n	80012f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fb01 	bl	80018e0 <DMA_CheckFifoParam>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2240      	movs	r2, #64	@ 0x40
 80012e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012f2:	2301      	movs	r3, #1
 80012f4:	e016      	b.n	8001324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fab8 	bl	8001874 <DMA_CalcBaseAndBitshift>
 8001304:	4603      	mov	r3, r0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130c:	223f      	movs	r2, #63	@ 0x3f
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f010803f 	.word	0xf010803f

08001330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_DMA_Start_IT+0x26>
 8001352:	2302      	movs	r3, #2
 8001354:	e040      	b.n	80013d8 <HAL_DMA_Start_IT+0xa8>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d12f      	bne.n	80013ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fa4a 	bl	8001818 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	223f      	movs	r2, #63	@ 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0216 	orr.w	r2, r2, #22
 800139e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0208 	orr.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e005      	b.n	80013d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013ee:	f7ff fdaf 	bl	8000f50 <HAL_GetTick>
 80013f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d008      	beq.n	8001412 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e052      	b.n	80014b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0216 	bic.w	r2, r2, #22
 8001420:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001430:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <HAL_DMA_Abort+0x62>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0208 	bic.w	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001462:	e013      	b.n	800148c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001464:	f7ff fd74 	bl	8000f50 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b05      	cmp	r3, #5
 8001470:	d90c      	bls.n	800148c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e015      	b.n	80014b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e4      	bne.n	8001464 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149e:	223f      	movs	r2, #63	@ 0x3f
 80014a0:	409a      	lsls	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d004      	beq.n	80014de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00c      	b.n	80014f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2205      	movs	r2, #5
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001510:	4b8e      	ldr	r3, [pc, #568]	@ (800174c <HAL_DMA_IRQHandler+0x248>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a8e      	ldr	r2, [pc, #568]	@ (8001750 <HAL_DMA_IRQHandler+0x24c>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0a9b      	lsrs	r3, r3, #10
 800151c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152e:	2208      	movs	r2, #8
 8001530:	409a      	lsls	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155c:	2208      	movs	r2, #8
 800155e:	409a      	lsls	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	2201      	movs	r2, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d012      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001592:	2201      	movs	r2, #1
 8001594:	409a      	lsls	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015aa:	2204      	movs	r2, #4
 80015ac:	409a      	lsls	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c8:	2204      	movs	r2, #4
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d4:	f043 0204 	orr.w	r2, r3, #4
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e0:	2210      	movs	r2, #16
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d043      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d03c      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fe:	2210      	movs	r2, #16
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d018      	beq.n	8001646 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d024      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
 8001632:	e01f      	b.n	8001674 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
 8001644:	e016      	b.n	8001674 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0208 	bic.w	r2, r2, #8
 8001662:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001678:	2220      	movs	r2, #32
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 808f 	beq.w	80017a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8087 	beq.w	80017a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169a:	2220      	movs	r2, #32
 800169c:	409a      	lsls	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	d136      	bne.n	800171c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0216 	bic.w	r2, r2, #22
 80016bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d103      	bne.n	80016de <HAL_DMA_IRQHandler+0x1da>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0208 	bic.w	r2, r2, #8
 80016ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f2:	223f      	movs	r2, #63	@ 0x3f
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800170e:	2b00      	cmp	r3, #0
 8001710:	d07e      	beq.n	8001810 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
        }
        return;
 800171a:	e079      	b.n	8001810 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01d      	beq.n	8001766 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10d      	bne.n	8001754 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173c:	2b00      	cmp	r3, #0
 800173e:	d031      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
 8001748:	e02c      	b.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
 800174a:	bf00      	nop
 800174c:	20000000 	.word	0x20000000
 8001750:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001758:	2b00      	cmp	r3, #0
 800175a:	d023      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	4798      	blx	r3
 8001764:	e01e      	b.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0210 	bic.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d032      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2205      	movs	r2, #5
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d307      	bcc.n	80017ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f2      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x2cc>
 80017ea:	e000      	b.n	80017ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
 800180e:	e000      	b.n	8001812 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001810:	bf00      	nop
    }
  }
}
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001834:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b40      	cmp	r3, #64	@ 0x40
 8001844:	d108      	bne.n	8001858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001856:	e007      	b.n	8001868 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3b10      	subs	r3, #16
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800188e:	4a13      	ldr	r2, [pc, #76]	@ (80018dc <DMA_CalcBaseAndBitshift+0x68>)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d909      	bls.n	80018b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80018b4:	e007      	b.n	80018c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	aaaaaaab 	.word	0xaaaaaaab
 80018dc:	08005260 	.word	0x08005260

080018e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11f      	bne.n	800193a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d856      	bhi.n	80019ae <DMA_CheckFifoParam+0xce>
 8001900:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <DMA_CheckFifoParam+0x28>)
 8001902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001906:	bf00      	nop
 8001908:	08001919 	.word	0x08001919
 800190c:	0800192b 	.word	0x0800192b
 8001910:	08001919 	.word	0x08001919
 8001914:	080019af 	.word	0x080019af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d046      	beq.n	80019b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001928:	e043      	b.n	80019b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001932:	d140      	bne.n	80019b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001938:	e03d      	b.n	80019b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001942:	d121      	bne.n	8001988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d837      	bhi.n	80019ba <DMA_CheckFifoParam+0xda>
 800194a:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <DMA_CheckFifoParam+0x70>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001961 	.word	0x08001961
 8001954:	08001967 	.word	0x08001967
 8001958:	08001961 	.word	0x08001961
 800195c:	08001979 	.word	0x08001979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      break;
 8001964:	e030      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d025      	beq.n	80019be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001976:	e022      	b.n	80019be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001980:	d11f      	bne.n	80019c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001986:	e01c      	b.n	80019c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d903      	bls.n	8001996 <DMA_CheckFifoParam+0xb6>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d003      	beq.n	800199c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001994:	e018      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
      break;
 800199a:	e015      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00e      	beq.n	80019c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
      break;
 80019ac:	e00b      	b.n	80019c6 <DMA_CheckFifoParam+0xe6>
      break;
 80019ae:	bf00      	nop
 80019b0:	e00a      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e008      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e006      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e004      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e002      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019c2:	bf00      	nop
 80019c4:	e000      	b.n	80019c8 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
    }
  } 
  
  return status; 
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e165      	b.n	8001cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8154 	bne.w	8001cba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80ae 	beq.w	8001cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a58      	ldr	r2, [pc, #352]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce0 <HAL_GPIO_Init+0x308>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce4 <HAL_GPIO_Init+0x30c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x216>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <HAL_GPIO_Init+0x310>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x212>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cec <HAL_GPIO_Init+0x314>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf0 <HAL_GPIO_Init+0x318>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x20a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf4 <HAL_GPIO_Init+0x31c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x206>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x202>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a31      	ldr	r2, [pc, #196]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a11      	ldr	r2, [pc, #68]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae96 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0cc      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b68      	ldr	r3, [pc, #416]	@ (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d90c      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b65      	ldr	r3, [pc, #404]	@ (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	@ (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0b8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b59      	ldr	r3, [pc, #356]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da0:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4a52      	ldr	r2, [pc, #328]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	494d      	ldr	r1, [pc, #308]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d044      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d119      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e067      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4934      	ldr	r1, [pc, #208]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f894 	bl	8000f50 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7ff f890 	bl	8000f50 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e04f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d20c      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	@ (8001eec <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4916      	ldr	r1, [pc, #88]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea6:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	490e      	ldr	r1, [pc, #56]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eba:	f000 f855 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	490a      	ldr	r1, [pc, #40]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	5ccb      	ldrb	r3, [r1, r3]
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	4a09      	ldr	r2, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fff4 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08005248 	.word	0x08005248
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000

08001f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f1c:	f7ff fff0 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0a9b      	lsrs	r3, r3, #10
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4903      	ldr	r1, [pc, #12]	@ (8001f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	08005258 	.word	0x08005258

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f44:	f7ff ffdc 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0b5b      	lsrs	r3, r3, #13
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4903      	ldr	r1, [pc, #12]	@ (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08005258 	.word	0x08005258

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f6c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8e:	4bcb      	ldr	r3, [pc, #812]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	f200 8206 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x440>
 8001f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fd9 	.word	0x08001fd9
 8001fa8:	080023a9 	.word	0x080023a9
 8001fac:	080023a9 	.word	0x080023a9
 8001fb0:	080023a9 	.word	0x080023a9
 8001fb4:	08001fe1 	.word	0x08001fe1
 8001fb8:	080023a9 	.word	0x080023a9
 8001fbc:	080023a9 	.word	0x080023a9
 8001fc0:	080023a9 	.word	0x080023a9
 8001fc4:	08001fe9 	.word	0x08001fe9
 8001fc8:	080023a9 	.word	0x080023a9
 8001fcc:	080023a9 	.word	0x080023a9
 8001fd0:	080023a9 	.word	0x080023a9
 8001fd4:	080021d9 	.word	0x080021d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd8:	4bb9      	ldr	r3, [pc, #740]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fde:	e1e7      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe0:	4bb8      	ldr	r3, [pc, #736]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fe6:	e1e3      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe8:	4bb4      	ldr	r3, [pc, #720]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff4:	4bb1      	ldr	r3, [pc, #708]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d071      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002000:	4bae      	ldr	r3, [pc, #696]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	2200      	movs	r2, #0
 8002008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800200c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002018:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0159      	lsls	r1, r3, #5
 8002034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002038:	0150      	lsls	r0, r2, #5
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4621      	mov	r1, r4
 8002040:	1a51      	subs	r1, r2, r1
 8002042:	6439      	str	r1, [r7, #64]	@ 0x40
 8002044:	4629      	mov	r1, r5
 8002046:	eb63 0301 	sbc.w	r3, r3, r1
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002058:	4649      	mov	r1, r9
 800205a:	018b      	lsls	r3, r1, #6
 800205c:	4641      	mov	r1, r8
 800205e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002062:	4641      	mov	r1, r8
 8002064:	018a      	lsls	r2, r1, #6
 8002066:	4641      	mov	r1, r8
 8002068:	1a51      	subs	r1, r2, r1
 800206a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800206c:	4649      	mov	r1, r9
 800206e:	eb63 0301 	sbc.w	r3, r3, r1
 8002072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002080:	4649      	mov	r1, r9
 8002082:	00cb      	lsls	r3, r1, #3
 8002084:	4641      	mov	r1, r8
 8002086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800208a:	4641      	mov	r1, r8
 800208c:	00ca      	lsls	r2, r1, #3
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	4603      	mov	r3, r0
 8002094:	4622      	mov	r2, r4
 8002096:	189b      	adds	r3, r3, r2
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
 800209a:	462b      	mov	r3, r5
 800209c:	460a      	mov	r2, r1
 800209e:	eb42 0303 	adc.w	r3, r2, r3
 80020a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020b0:	4629      	mov	r1, r5
 80020b2:	024b      	lsls	r3, r1, #9
 80020b4:	4621      	mov	r1, r4
 80020b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ba:	4621      	mov	r1, r4
 80020bc:	024a      	lsls	r2, r1, #9
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020c6:	2200      	movs	r2, #0
 80020c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020d4:	f7fe f8ec 	bl	80002b0 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020e2:	e067      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e4:	4b75      	ldr	r3, [pc, #468]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020fe:	2300      	movs	r3, #0
 8002100:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002102:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002106:	4622      	mov	r2, r4
 8002108:	462b      	mov	r3, r5
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	0159      	lsls	r1, r3, #5
 8002114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002118:	0150      	lsls	r0, r2, #5
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4621      	mov	r1, r4
 8002120:	1a51      	subs	r1, r2, r1
 8002122:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002124:	4629      	mov	r1, r5
 8002126:	eb63 0301 	sbc.w	r3, r3, r1
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002138:	4649      	mov	r1, r9
 800213a:	018b      	lsls	r3, r1, #6
 800213c:	4641      	mov	r1, r8
 800213e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002142:	4641      	mov	r1, r8
 8002144:	018a      	lsls	r2, r1, #6
 8002146:	4641      	mov	r1, r8
 8002148:	ebb2 0a01 	subs.w	sl, r2, r1
 800214c:	4649      	mov	r1, r9
 800214e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800215e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002162:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002166:	4692      	mov	sl, r2
 8002168:	469b      	mov	fp, r3
 800216a:	4623      	mov	r3, r4
 800216c:	eb1a 0303 	adds.w	r3, sl, r3
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	462b      	mov	r3, r5
 8002174:	eb4b 0303 	adc.w	r3, fp, r3
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002186:	4629      	mov	r1, r5
 8002188:	028b      	lsls	r3, r1, #10
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002190:	4621      	mov	r1, r4
 8002192:	028a      	lsls	r2, r1, #10
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800219c:	2200      	movs	r2, #0
 800219e:	673b      	str	r3, [r7, #112]	@ 0x70
 80021a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80021a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021a6:	f7fe f883 	bl	80002b0 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4613      	mov	r3, r2
 80021b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021b4:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	3301      	adds	r3, #1
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021d6:	e0eb      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d8:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e4:	4b35      	ldr	r3, [pc, #212]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d06b      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f0:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x354>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	2200      	movs	r2, #0
 80021f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002202:	663b      	str	r3, [r7, #96]	@ 0x60
 8002204:	2300      	movs	r3, #0
 8002206:	667b      	str	r3, [r7, #100]	@ 0x64
 8002208:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800220c:	4622      	mov	r2, r4
 800220e:	462b      	mov	r3, r5
 8002210:	f04f 0000 	mov.w	r0, #0
 8002214:	f04f 0100 	mov.w	r1, #0
 8002218:	0159      	lsls	r1, r3, #5
 800221a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800221e:	0150      	lsls	r0, r2, #5
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4621      	mov	r1, r4
 8002226:	1a51      	subs	r1, r2, r1
 8002228:	61b9      	str	r1, [r7, #24]
 800222a:	4629      	mov	r1, r5
 800222c:	eb63 0301 	sbc.w	r3, r3, r1
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800223e:	4659      	mov	r1, fp
 8002240:	018b      	lsls	r3, r1, #6
 8002242:	4651      	mov	r1, sl
 8002244:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002248:	4651      	mov	r1, sl
 800224a:	018a      	lsls	r2, r1, #6
 800224c:	4651      	mov	r1, sl
 800224e:	ebb2 0801 	subs.w	r8, r2, r1
 8002252:	4659      	mov	r1, fp
 8002254:	eb63 0901 	sbc.w	r9, r3, r1
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002264:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002268:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800226c:	4690      	mov	r8, r2
 800226e:	4699      	mov	r9, r3
 8002270:	4623      	mov	r3, r4
 8002272:	eb18 0303 	adds.w	r3, r8, r3
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	462b      	mov	r3, r5
 800227a:	eb49 0303 	adc.w	r3, r9, r3
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800228c:	4629      	mov	r1, r5
 800228e:	024b      	lsls	r3, r1, #9
 8002290:	4621      	mov	r1, r4
 8002292:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002296:	4621      	mov	r1, r4
 8002298:	024a      	lsls	r2, r1, #9
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022a2:	2200      	movs	r2, #0
 80022a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022ac:	f7fe f800 	bl	80002b0 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ba:	e065      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x420>
 80022bc:	40023800 	.word	0x40023800
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c8:	4b3d      	ldr	r3, [pc, #244]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	2200      	movs	r2, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	4611      	mov	r1, r2
 80022d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022da:	2300      	movs	r3, #0
 80022dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80022de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022e2:	4642      	mov	r2, r8
 80022e4:	464b      	mov	r3, r9
 80022e6:	f04f 0000 	mov.w	r0, #0
 80022ea:	f04f 0100 	mov.w	r1, #0
 80022ee:	0159      	lsls	r1, r3, #5
 80022f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f4:	0150      	lsls	r0, r2, #5
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4641      	mov	r1, r8
 80022fc:	1a51      	subs	r1, r2, r1
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	4649      	mov	r1, r9
 8002302:	eb63 0301 	sbc.w	r3, r3, r1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002314:	4659      	mov	r1, fp
 8002316:	018b      	lsls	r3, r1, #6
 8002318:	4651      	mov	r1, sl
 800231a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800231e:	4651      	mov	r1, sl
 8002320:	018a      	lsls	r2, r1, #6
 8002322:	4651      	mov	r1, sl
 8002324:	1a54      	subs	r4, r2, r1
 8002326:	4659      	mov	r1, fp
 8002328:	eb63 0501 	sbc.w	r5, r3, r1
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	00eb      	lsls	r3, r5, #3
 8002336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800233a:	00e2      	lsls	r2, r4, #3
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	4643      	mov	r3, r8
 8002342:	18e3      	adds	r3, r4, r3
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	464b      	mov	r3, r9
 8002348:	eb45 0303 	adc.w	r3, r5, r3
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800235a:	4629      	mov	r1, r5
 800235c:	028b      	lsls	r3, r1, #10
 800235e:	4621      	mov	r1, r4
 8002360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002364:	4621      	mov	r1, r4
 8002366:	028a      	lsls	r2, r1, #10
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002370:	2200      	movs	r2, #0
 8002372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002374:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002376:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800237a:	f7fd ff99 	bl	80002b0 <__aeabi_uldivmod>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4613      	mov	r3, r2
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002388:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	0f1b      	lsrs	r3, r3, #28
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800239a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023a6:	e003      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	37b8      	adds	r7, #184	@ 0xb8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	00f42400 	.word	0x00f42400

080023c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e28d      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8083 	beq.w	80024ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023e8:	4b94      	ldr	r3, [pc, #592]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d019      	beq.n	8002428 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023f4:	4b91      	ldr	r3, [pc, #580]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002400:	4b8e      	ldr	r3, [pc, #568]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800240c:	d00c      	beq.n	8002428 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b8b      	ldr	r3, [pc, #556]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b84      	ldr	r3, [pc, #528]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05b      	beq.n	80024ec <HAL_RCC_OscConfig+0x124>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d157      	bne.n	80024ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e25a      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x90>
 800244a:	4b7c      	ldr	r3, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7b      	ldr	r2, [pc, #492]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xcc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0xb4>
 8002462:	4b76      	ldr	r3, [pc, #472]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a75      	ldr	r2, [pc, #468]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b73      	ldr	r3, [pc, #460]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a72      	ldr	r2, [pc, #456]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xcc>
 800247c:	4b6f      	ldr	r3, [pc, #444]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6e      	ldr	r2, [pc, #440]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b6c      	ldr	r3, [pc, #432]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6b      	ldr	r2, [pc, #428]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fd58 	bl	8000f50 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fd54 	bl	8000f50 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	@ 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e21f      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b61      	ldr	r3, [pc, #388]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xdc>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd44 	bl	8000f50 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fd40 	bl	8000f50 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e20b      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b57      	ldr	r3, [pc, #348]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x104>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06f      	beq.n	80025da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024fa:	4b50      	ldr	r3, [pc, #320]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d017      	beq.n	8002536 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002506:	4b4d      	ldr	r3, [pc, #308]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
        || \
 800250e:	2b08      	cmp	r3, #8
 8002510:	d105      	bne.n	800251e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002512:	4b4a      	ldr	r3, [pc, #296]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b47      	ldr	r3, [pc, #284]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b44      	ldr	r3, [pc, #272]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b41      	ldr	r3, [pc, #260]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x186>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1d3      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4937      	ldr	r1, [pc, #220]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <HAL_RCC_OscConfig+0x278>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fced 	bl	8000f50 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe fce9 	bl	8000f50 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1b4      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b28      	ldr	r3, [pc, #160]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4925      	ldr	r1, [pc, #148]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b24      	ldr	r3, [pc, #144]	@ (8002640 <HAL_RCC_OscConfig+0x278>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fccc 	bl	8000f50 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fcc8 	bl	8000f50 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e193      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d036      	beq.n	8002654 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fcac 	bl	8000f50 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe fca8 	bl	8000f50 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e173      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_OscConfig+0x274>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x234>
 800261a:	e01b      	b.n	8002654 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_OscConfig+0x27c>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fc95 	bl	8000f50 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	e00e      	b.n	8002648 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fc91 	bl	8000f50 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d907      	bls.n	8002648 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e15c      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
 800263c:	40023800 	.word	0x40023800
 8002640:	42470000 	.word	0x42470000
 8002644:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b8a      	ldr	r3, [pc, #552]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ea      	bne.n	800262a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8097 	beq.w	8002790 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b83      	ldr	r3, [pc, #524]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b7f      	ldr	r3, [pc, #508]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	4a7e      	ldr	r2, [pc, #504]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	@ 0x40
 8002682:	4b7c      	ldr	r3, [pc, #496]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b79      	ldr	r3, [pc, #484]	@ (8002878 <HAL_RCC_OscConfig+0x4b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b76      	ldr	r3, [pc, #472]	@ (8002878 <HAL_RCC_OscConfig+0x4b0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a75      	ldr	r2, [pc, #468]	@ (8002878 <HAL_RCC_OscConfig+0x4b0>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc51 	bl	8000f50 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe fc4d 	bl	8000f50 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e118      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002878 <HAL_RCC_OscConfig+0x4b0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x31e>
 80026d8:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026dc:	4a65      	ldr	r2, [pc, #404]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x358>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x340>
 80026ee:	4b61      	ldr	r3, [pc, #388]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	4a60      	ldr	r2, [pc, #384]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6713      	str	r3, [r2, #112]	@ 0x70
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0x358>
 8002708:	4b5a      	ldr	r3, [pc, #360]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270c:	4a59      	ldr	r2, [pc, #356]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	6713      	str	r3, [r2, #112]	@ 0x70
 8002714:	4b57      	ldr	r3, [pc, #348]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002718:	4a56      	ldr	r2, [pc, #344]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fc12 	bl	8000f50 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fc0e 	bl	8000f50 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0d7      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	4b4b      	ldr	r3, [pc, #300]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ee      	beq.n	8002730 <HAL_RCC_OscConfig+0x368>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fbfc 	bl	8000f50 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fbf8 	bl	8000f50 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0c1      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	4b40      	ldr	r3, [pc, #256]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ee      	bne.n	800275c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b3b      	ldr	r3, [pc, #236]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	4a3a      	ldr	r2, [pc, #232]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80ad 	beq.w	80028f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279a:	4b36      	ldr	r3, [pc, #216]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d060      	beq.n	8002868 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d145      	bne.n	800283a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b33      	ldr	r3, [pc, #204]	@ (800287c <HAL_RCC_OscConfig+0x4b4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fbcc 	bl	8000f50 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fbc8 	bl	8000f50 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e093      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	019b      	lsls	r3, r3, #6
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	071b      	lsls	r3, r3, #28
 8002806:	491b      	ldr	r1, [pc, #108]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280c:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCC_OscConfig+0x4b4>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fb9d 	bl	8000f50 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7fe fb99 	bl	8000f50 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e064      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x452>
 8002838:	e05c      	b.n	80028f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <HAL_RCC_OscConfig+0x4b4>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fb86 	bl	8000f50 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fb82 	bl	8000f50 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e04d      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_RCC_OscConfig+0x4ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x480>
 8002866:	e045      	b.n	80028f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d107      	bne.n	8002880 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e040      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
 8002874:	40023800 	.word	0x40023800
 8002878:	40007000 	.word	0x40007000
 800287c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <HAL_RCC_OscConfig+0x538>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d030      	beq.n	80028f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d129      	bne.n	80028f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d122      	bne.n	80028f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d119      	bne.n	80028f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	3b01      	subs	r3, #1
 80028ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d10f      	bne.n	80028f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e042      	b.n	800299c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe f990 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	@ 0x24
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 ffdb 	bl	8003904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800295c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800296c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800297c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d175      	bne.n	8002ab0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Transmit+0x2c>
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e06e      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	@ 0x21
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e2:	f7fe fab5 	bl	8000f50 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fc:	d108      	bne.n	8002a10 <HAL_UART_Transmit+0x6c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e003      	b.n	8002a18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a18:	e02e      	b.n	8002a78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	@ 0x80
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fc79 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e03a      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	3302      	adds	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	e007      	b.n	8002a6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1cb      	bne.n	8002a1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2140      	movs	r1, #64	@ 0x40
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fc45 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e006      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d112      	bne.n	8002afa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_UART_Receive_IT+0x26>
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e00b      	b.n	8002afc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	461a      	mov	r2, r3
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fc6c 	bl	80033ce <UART_Start_Receive_IT>
 8002af6:	4603      	mov	r3, r0
 8002af8:	e000      	b.n	8002afc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	@ 0x30
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d14a      	bne.n	8002bb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e043      	b.n	8002bb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fc7f 	bl	8003444 <UART_Start_Receive_DMA>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d12c      	bne.n	8002bae <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d125      	bne.n	8002ba8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	330c      	adds	r3, #12
 8002b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	617b      	str	r3, [r7, #20]
   return(result);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f043 0310 	orr.w	r3, r3, #16
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b92:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	6a39      	ldr	r1, [r7, #32]
 8002b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e5      	bne.n	8002b72 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002ba6:	e002      	b.n	8002bae <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bb2:	e000      	b.n	8002bb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3730      	adds	r7, #48	@ 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_UART_IRQHandler+0x66>
 8002c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fdb1 	bl	8003786 <UART_Receive_IT>
      return;
 8002c24:	e25b      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80de 	beq.w	8002dec <HAL_UART_IRQHandler+0x22c>
 8002c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80d1 	beq.w	8002dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_UART_IRQHandler+0xae>
 8002c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_UART_IRQHandler+0xd2>
 8002c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	f043 0202 	orr.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xf6>
 8002c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x126>
 8002cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f043 0208 	orr.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 81f2 	beq.w	80030d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_UART_IRQHandler+0x14e>
 8002cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fd3c 	bl	8003786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <HAL_UART_IRQHandler+0x17a>
 8002d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d04f      	beq.n	8002dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fc44 	bl	80035c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d141      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1d9      	bne.n	8002d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d013      	beq.n	8002dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fa0 <HAL_UART_IRQHandler+0x3e0>)
 8002da8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fb86 	bl	80014c0 <HAL_DMA_Abort_IT>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e00e      	b.n	8002de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f99e 	bl	800310c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd0:	e00a      	b.n	8002de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f99a 	bl	800310c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e006      	b.n	8002de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f996 	bl	800310c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002de6:	e175      	b.n	80030d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	bf00      	nop
    return;
 8002dea:	e173      	b.n	80030d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	f040 814f 	bne.w	8003094 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8148 	beq.w	8003094 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8141 	beq.w	8003094 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e32:	2b40      	cmp	r3, #64	@ 0x40
 8002e34:	f040 80b6 	bne.w	8002fa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8145 	beq.w	80030d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e56:	429a      	cmp	r2, r3
 8002e58:	f080 813e 	bcs.w	80030d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e6e:	f000 8088 	beq.w	8002f82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	330c      	adds	r3, #12
 8002e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1d9      	bne.n	8002e72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e1      	bne.n	8002ebe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3314      	adds	r3, #20
 8002f00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3314      	adds	r3, #20
 8002f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e3      	bne.n	8002efa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f52:	f023 0310 	bic.w	r3, r3, #16
 8002f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e3      	bne.n	8002f40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fa2f 	bl	80013e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fc33 	bl	8000804 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f9e:	e09b      	b.n	80030d8 <HAL_UART_IRQHandler+0x518>
 8002fa0:	0800368f 	.word	0x0800368f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 808e 	beq.w	80030dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8089 	beq.w	80030dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e3      	bne.n	8002fca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3314      	adds	r3, #20
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	623b      	str	r3, [r7, #32]
   return(result);
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3314      	adds	r3, #20
 8003022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003026:	633a      	str	r2, [r7, #48]	@ 0x30
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800302c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e3      	bne.n	8003002 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	60fb      	str	r3, [r7, #12]
   return(result);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0310 	bic.w	r3, r3, #16
 800305e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800306c:	61fa      	str	r2, [r7, #28]
 800306e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	617b      	str	r3, [r7, #20]
   return(result);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e3      	bne.n	8003048 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fbb9 	bl	8000804 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003092:	e023      	b.n	80030dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <HAL_UART_IRQHandler+0x4f4>
 80030a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fb02 	bl	80036b6 <UART_Transmit_IT>
    return;
 80030b2:	e014      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <HAL_UART_IRQHandler+0x51e>
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fb42 	bl	8003756 <UART_EndTransmit_IT>
    return;
 80030d2:	e004      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
    return;
 80030d4:	bf00      	nop
 80030d6:	e002      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
      return;
 80030d8:	bf00      	nop
 80030da:	e000      	b.n	80030de <HAL_UART_IRQHandler+0x51e>
      return;
 80030dc:	bf00      	nop
  }
}
 80030de:	37e8      	adds	r7, #232	@ 0xe8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b09c      	sub	sp, #112	@ 0x70
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d172      	bne.n	8003222 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800313c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313e:	2200      	movs	r2, #0
 8003140:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800315a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003162:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	667b      	str	r3, [r7, #100]	@ 0x64
 800318e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3314      	adds	r3, #20
 8003194:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003196:	647a      	str	r2, [r7, #68]	@ 0x44
 8003198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800319c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	623b      	str	r3, [r7, #32]
   return(result);
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e5      	bne.n	80031aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d119      	bne.n	8003222 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800320e:	61fa      	str	r2, [r7, #28]
 8003210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	69b9      	ldr	r1, [r7, #24]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	617b      	str	r3, [r7, #20]
   return(result);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003224:	2200      	movs	r2, #0
 8003226:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	2b01      	cmp	r3, #1
 800322e:	d106      	bne.n	800323e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003232:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003234:	4619      	mov	r1, r3
 8003236:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003238:	f7fd fae4 	bl	8000804 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800323c:	e002      	b.n	8003244 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800323e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003240:	f7fd fa76 	bl	8000730 <HAL_UART_RxCpltCallback>
}
 8003244:	bf00      	nop
 8003246:	3770      	adds	r7, #112	@ 0x70
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	2b01      	cmp	r3, #1
 8003266:	d108      	bne.n	800327a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7fd fac6 	bl	8000804 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003278:	e002      	b.n	8003280 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7ff ff3c 	bl	80030f8 <HAL_UART_RxHalfCpltCallback>
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	2b80      	cmp	r3, #128	@ 0x80
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b21      	cmp	r3, #33	@ 0x21
 80032ba:	d108      	bne.n	80032ce <UART_DMAError+0x46>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80032c8:	68b8      	ldr	r0, [r7, #8]
 80032ca:	f000 f955 	bl	8003578 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b22      	cmp	r3, #34	@ 0x22
 80032ee:	d108      	bne.n	8003302 <UART_DMAError+0x7a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80032fc:	68b8      	ldr	r0, [r7, #8]
 80032fe:	f000 f963 	bl	80035c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800330e:	68b8      	ldr	r0, [r7, #8]
 8003310:	f7ff fefc 	bl	800310c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332c:	e03b      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d037      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fd fe0b 	bl	8000f50 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <UART_WaitOnFlagUntilTimeout+0x30>
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e03a      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d023      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b80      	cmp	r3, #128	@ 0x80
 8003362:	d020      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b40      	cmp	r3, #64	@ 0x40
 8003368:	d01d      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b08      	cmp	r3, #8
 8003376:	d116      	bne.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f91a 	bl	80035c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2208      	movs	r2, #8
 8003398:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e00f      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d0b4      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	4613      	mov	r3, r2
 80033da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2222      	movs	r2, #34	@ 0x22
 80033f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003412:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b098      	sub	sp, #96	@ 0x60
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2222      	movs	r2, #34	@ 0x22
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003470:	4a3e      	ldr	r2, [pc, #248]	@ (800356c <UART_Start_Receive_DMA+0x128>)
 8003472:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	4a3d      	ldr	r2, [pc, #244]	@ (8003570 <UART_Start_Receive_DMA+0x12c>)
 800347a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <UART_Start_Receive_DMA+0x130>)
 8003482:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	2200      	movs	r2, #0
 800348a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	f7fd ff44 	bl	8001330 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d019      	beq.n	80034fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80034ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80034f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	657b      	str	r3, [r7, #84]	@ 0x54
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3314      	adds	r3, #20
 8003518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800351a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e5      	bne.n	80034fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	617b      	str	r3, [r7, #20]
   return(result);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003544:	653b      	str	r3, [r7, #80]	@ 0x50
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800354e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6a39      	ldr	r1, [r7, #32]
 8003554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	61fb      	str	r3, [r7, #28]
   return(result);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3760      	adds	r7, #96	@ 0x60
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	08003121 	.word	0x08003121
 8003570:	0800324d 	.word	0x0800324d
 8003574:	08003289 	.word	0x08003289

08003578 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	61ba      	str	r2, [r7, #24]
 80035a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6979      	ldr	r1, [r7, #20]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	613b      	str	r3, [r7, #16]
   return(result);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80035bc:	bf00      	nop
 80035be:	3724      	adds	r7, #36	@ 0x24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b095      	sub	sp, #84	@ 0x54
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	330c      	adds	r3, #12
 80035d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e5      	bne.n	80035d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3314      	adds	r3, #20
 800360a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	61fb      	str	r3, [r7, #28]
   return(result);
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	2b01      	cmp	r3, #1
 800363e:	d119      	bne.n	8003674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f023 0310 	bic.w	r3, r3, #16
 8003656:	647b      	str	r3, [r7, #68]	@ 0x44
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003660:	61ba      	str	r2, [r7, #24]
 8003662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6979      	ldr	r1, [r7, #20]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	613b      	str	r3, [r7, #16]
   return(result);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003682:	bf00      	nop
 8003684:	3754      	adds	r7, #84	@ 0x54
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff fd2f 	bl	800310c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b21      	cmp	r3, #33	@ 0x21
 80036c8:	d13e      	bne.n	8003748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d2:	d114      	bne.n	80036fe <UART_Transmit_IT+0x48>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d110      	bne.n	80036fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	621a      	str	r2, [r3, #32]
 80036fc:	e008      	b.n	8003710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	1c59      	adds	r1, r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6211      	str	r1, [r2, #32]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4619      	mov	r1, r3
 800371e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10f      	bne.n	8003744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fcb4 	bl	80030e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b08c      	sub	sp, #48	@ 0x30
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b22      	cmp	r3, #34	@ 0x22
 8003798:	f040 80ae 	bne.w	80038f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a4:	d117      	bne.n	80037d6 <UART_Receive_IT+0x50>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80037d4:	e026      	b.n	8003824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e8:	d007      	beq.n	80037fa <UART_Receive_IT+0x74>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <UART_Receive_IT+0x82>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e008      	b.n	800381a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003814:	b2da      	uxtb	r2, r3
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29b      	uxth	r3, r3
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4619      	mov	r1, r3
 8003832:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	d15d      	bne.n	80038f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0220 	bic.w	r2, r2, #32
 8003846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	2b01      	cmp	r3, #1
 800387c:	d135      	bne.n	80038ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	613b      	str	r3, [r7, #16]
   return(result);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f023 0310 	bic.w	r3, r3, #16
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a4:	623a      	str	r2, [r7, #32]
 80038a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d10a      	bne.n	80038dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fc ff8e 	bl	8000804 <HAL_UARTEx_RxEventCallback>
 80038e8:	e002      	b.n	80038f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fc ff20 	bl	8000730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e002      	b.n	80038fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3730      	adds	r7, #48	@ 0x30
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003908:	b0c0      	sub	sp, #256	@ 0x100
 800390a:	af00      	add	r7, sp, #0
 800390c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003920:	68d9      	ldr	r1, [r3, #12]
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	ea40 0301 	orr.w	r3, r0, r1
 800392c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	431a      	orrs	r2, r3
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800395c:	f021 010c 	bic.w	r1, r1, #12
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800396a:	430b      	orrs	r3, r1
 800396c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	6999      	ldr	r1, [r3, #24]
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	ea40 0301 	orr.w	r3, r0, r1
 800398a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b8f      	ldr	r3, [pc, #572]	@ (8003bd0 <UART_SetConfig+0x2cc>)
 8003994:	429a      	cmp	r2, r3
 8003996:	d005      	beq.n	80039a4 <UART_SetConfig+0xa0>
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd4 <UART_SetConfig+0x2d0>)
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d104      	bne.n	80039ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7fe facc 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 80039a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039ac:	e003      	b.n	80039b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ae:	f7fe fab3 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 80039b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039c0:	f040 810c 	bne.w	8003bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	1891      	adds	r1, r2, r2
 80039dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039de:	415b      	adcs	r3, r3
 80039e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039e6:	4621      	mov	r1, r4
 80039e8:	eb12 0801 	adds.w	r8, r2, r1
 80039ec:	4629      	mov	r1, r5
 80039ee:	eb43 0901 	adc.w	r9, r3, r1
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a06:	4690      	mov	r8, r2
 8003a08:	4699      	mov	r9, r3
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	eb18 0303 	adds.w	r3, r8, r3
 8003a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a14:	462b      	mov	r3, r5
 8003a16:	eb49 0303 	adc.w	r3, r9, r3
 8003a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a32:	460b      	mov	r3, r1
 8003a34:	18db      	adds	r3, r3, r3
 8003a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a38:	4613      	mov	r3, r2
 8003a3a:	eb42 0303 	adc.w	r3, r2, r3
 8003a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a48:	f7fc fc32 	bl	80002b0 <__aeabi_uldivmod>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4b61      	ldr	r3, [pc, #388]	@ (8003bd8 <UART_SetConfig+0x2d4>)
 8003a52:	fba3 2302 	umull	r2, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	011c      	lsls	r4, r3, #4
 8003a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	464b      	mov	r3, r9
 8003a70:	1891      	adds	r1, r2, r2
 8003a72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a74:	415b      	adcs	r3, r3
 8003a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a82:	4649      	mov	r1, r9
 8003a84:	eb43 0b01 	adc.w	fp, r3, r1
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9c:	4692      	mov	sl, r2
 8003a9e:	469b      	mov	fp, r3
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8003aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	18db      	adds	r3, r3, r3
 8003acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ace:	4613      	mov	r3, r2
 8003ad0:	eb42 0303 	adc.w	r3, r2, r3
 8003ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ade:	f7fc fbe7 	bl	80002b0 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <UART_SetConfig+0x2d4>)
 8003aea:	fba3 2301 	umull	r2, r3, r3, r1
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2264      	movs	r2, #100	@ 0x64
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	1acb      	subs	r3, r1, r3
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003afe:	4b36      	ldr	r3, [pc, #216]	@ (8003bd8 <UART_SetConfig+0x2d4>)
 8003b00:	fba3 2302 	umull	r2, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b0c:	441c      	add	r4, r3
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b30:	4641      	mov	r1, r8
 8003b32:	1851      	adds	r1, r2, r1
 8003b34:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b36:	4649      	mov	r1, r9
 8003b38:	414b      	adcs	r3, r1
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b48:	4659      	mov	r1, fp
 8003b4a:	00cb      	lsls	r3, r1, #3
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b52:	4651      	mov	r1, sl
 8003b54:	00ca      	lsls	r2, r1, #3
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b64:	464b      	mov	r3, r9
 8003b66:	460a      	mov	r2, r1
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b84:	460b      	mov	r3, r1
 8003b86:	18db      	adds	r3, r3, r3
 8003b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	eb42 0303 	adc.w	r3, r2, r3
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b9a:	f7fc fb89 	bl	80002b0 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <UART_SetConfig+0x2d4>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	@ 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	3332      	adds	r3, #50	@ 0x32
 8003bb6:	4a08      	ldr	r2, [pc, #32]	@ (8003bd8 <UART_SetConfig+0x2d4>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 0207 	and.w	r2, r3, #7
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4422      	add	r2, r4
 8003bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bcc:	e106      	b.n	8003ddc <UART_SetConfig+0x4d8>
 8003bce:	bf00      	nop
 8003bd0:	40011000 	.word	0x40011000
 8003bd4:	40011400 	.word	0x40011400
 8003bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bee:	4642      	mov	r2, r8
 8003bf0:	464b      	mov	r3, r9
 8003bf2:	1891      	adds	r1, r2, r2
 8003bf4:	6239      	str	r1, [r7, #32]
 8003bf6:	415b      	adcs	r3, r3
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bfe:	4641      	mov	r1, r8
 8003c00:	1854      	adds	r4, r2, r1
 8003c02:	4649      	mov	r1, r9
 8003c04:	eb43 0501 	adc.w	r5, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	00eb      	lsls	r3, r5, #3
 8003c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c16:	00e2      	lsls	r2, r4, #3
 8003c18:	4614      	mov	r4, r2
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	4643      	mov	r3, r8
 8003c1e:	18e3      	adds	r3, r4, r3
 8003c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c24:	464b      	mov	r3, r9
 8003c26:	eb45 0303 	adc.w	r3, r5, r3
 8003c2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	008b      	lsls	r3, r1, #2
 8003c4e:	4621      	mov	r1, r4
 8003c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c54:	4621      	mov	r1, r4
 8003c56:	008a      	lsls	r2, r1, #2
 8003c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c5c:	f7fc fb28 	bl	80002b0 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b60      	ldr	r3, [pc, #384]	@ (8003de8 <UART_SetConfig+0x4e4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011c      	lsls	r4, r3, #4
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	61b9      	str	r1, [r7, #24]
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c90:	4641      	mov	r1, r8
 8003c92:	1851      	adds	r1, r2, r1
 8003c94:	6139      	str	r1, [r7, #16]
 8003c96:	4649      	mov	r1, r9
 8003c98:	414b      	adcs	r3, r1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca8:	4659      	mov	r1, fp
 8003caa:	00cb      	lsls	r3, r1, #3
 8003cac:	4651      	mov	r1, sl
 8003cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	00ca      	lsls	r2, r1, #3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	189b      	adds	r3, r3, r2
 8003cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	eb42 0303 	adc.w	r3, r2, r3
 8003ccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ce8:	4649      	mov	r1, r9
 8003cea:	008b      	lsls	r3, r1, #2
 8003cec:	4641      	mov	r1, r8
 8003cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	008a      	lsls	r2, r1, #2
 8003cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cfa:	f7fc fad9 	bl	80002b0 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <UART_SetConfig+0x4e4>)
 8003d06:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2264      	movs	r2, #100	@ 0x64
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	1acb      	subs	r3, r1, r3
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	3332      	adds	r3, #50	@ 0x32
 8003d18:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <UART_SetConfig+0x4e4>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d24:	441c      	add	r4, r3
 8003d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d76:	464b      	mov	r3, r9
 8003d78:	460a      	mov	r2, r1
 8003d7a:	eb42 0303 	adc.w	r3, r2, r3
 8003d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d98:	4649      	mov	r1, r9
 8003d9a:	008b      	lsls	r3, r1, #2
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da2:	4641      	mov	r1, r8
 8003da4:	008a      	lsls	r2, r1, #2
 8003da6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003daa:	f7fc fa81 	bl	80002b0 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <UART_SetConfig+0x4e4>)
 8003db4:	fba3 1302 	umull	r1, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	2164      	movs	r1, #100	@ 0x64
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	3332      	adds	r3, #50	@ 0x32
 8003dc6:	4a08      	ldr	r2, [pc, #32]	@ (8003de8 <UART_SetConfig+0x4e4>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	f003 020f 	and.w	r2, r3, #15
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4422      	add	r2, r4
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de8:	51eb851f 	.word	0x51eb851f

08003dec <noRTOS_print_version>:

noRTOS_task_t *global_list_of_tasks[NORTOS_NO_OF_MAX_TASK];
static uint32_t number_of_active_task = 0;


void noRTOS_print_version(void){
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
	printf("booting from noRTOS Version: %d.%d\n", NORTOS_VERSION_MAYOR, NORTOS_VERSION_MINOR);
 8003df0:	2201      	movs	r2, #1
 8003df2:	2100      	movs	r1, #0
 8003df4:	4802      	ldr	r0, [pc, #8]	@ (8003e00 <noRTOS_print_version+0x14>)
 8003df6:	f000 f921 	bl	800403c <iprintf>
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	080051f0 	.word	0x080051f0

08003e04 <noRTOS_print_active_task_running>:

void noRTOS_print_active_task_running(void){
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
	printf("starting noRTOS scheduler with %ld task in queue\n", number_of_active_task);
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <noRTOS_print_active_task_running+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4803      	ldr	r0, [pc, #12]	@ (8003e1c <noRTOS_print_active_task_running+0x18>)
 8003e10:	f000 f914 	bl	800403c <iprintf>
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200007e0 	.word	0x200007e0
 8003e1c:	08005214 	.word	0x08005214

08003e20 <noRTOS_run_scheduler>:
/* override this with your implementation */
__weak void noRTOS_setup(void){
	;
}

void noRTOS_run_scheduler(void) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0

	noRTOS_print_version();
 8003e26:	f7ff ffe1 	bl	8003dec <noRTOS_print_version>
	noRTOS_print_active_task_running();
 8003e2a:	f7ff ffeb 	bl	8003e04 <noRTOS_print_active_task_running>
	noRTOS_setup();
 8003e2e:	f7fc fc5b 	bl	80006e8 <noRTOS_setup>

	while(1){
		uint32_t now = NORTOS_SCHEDULAR_GET_TICK();
 8003e32:	f7fd f88d 	bl	8000f50 <HAL_GetTick>
 8003e36:	6038      	str	r0, [r7, #0]

		for(uint_fast32_t i = 0; i < number_of_active_task; i++){
 8003e38:	2300      	movs	r3, #0
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	e01c      	b.n	8003e78 <noRTOS_run_scheduler+0x58>
			if( (now - global_list_of_tasks[i]->tick) >= global_list_of_tasks[i]->delay){
 8003e3e:	4a11      	ldr	r2, [pc, #68]	@ (8003e84 <noRTOS_run_scheduler+0x64>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	490d      	ldr	r1, [pc, #52]	@ (8003e84 <noRTOS_run_scheduler+0x64>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d30b      	bcc.n	8003e72 <noRTOS_run_scheduler+0x52>
				global_list_of_tasks[i]->tick = now;
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e84 <noRTOS_run_scheduler+0x64>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	601a      	str	r2, [r3, #0]
				global_list_of_tasks[i]->task_callback();
 8003e66:	4a07      	ldr	r2, [pc, #28]	@ (8003e84 <noRTOS_run_scheduler+0x64>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4798      	blx	r3
		for(uint_fast32_t i = 0; i < number_of_active_task; i++){
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3301      	adds	r3, #1
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	4b03      	ldr	r3, [pc, #12]	@ (8003e88 <noRTOS_run_scheduler+0x68>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d3dd      	bcc.n	8003e3e <noRTOS_run_scheduler+0x1e>
	while(1){
 8003e82:	e7d6      	b.n	8003e32 <noRTOS_run_scheduler+0x12>
 8003e84:	200005e0 	.word	0x200005e0
 8003e88:	200007e0 	.word	0x200007e0

08003e8c <_write>:
#include "utils.h"


/* override _write, is used by puts and printf */
int _write(int file, char *ptr, int len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
    UART_SEND_TERMINAL((uint8_t*) ptr, (uint16_t)len);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4804      	ldr	r0, [pc, #16]	@ (8003eb4 <_write+0x28>)
 8003ea4:	f7fe fd7e 	bl	80029a4 <HAL_UART_Transmit>
	return len;
 8003ea8:	687b      	ldr	r3, [r7, #4]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200004d4 	.word	0x200004d4

08003eb8 <std>:
 8003eb8:	2300      	movs	r3, #0
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8003ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ec6:	6083      	str	r3, [r0, #8]
 8003ec8:	8181      	strh	r1, [r0, #12]
 8003eca:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ecc:	81c2      	strh	r2, [r0, #14]
 8003ece:	6183      	str	r3, [r0, #24]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	305c      	adds	r0, #92	@ 0x5c
 8003ed6:	f000 fa19 	bl	800430c <memset>
 8003eda:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <std+0x58>)
 8003edc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <std+0x5c>)
 8003ee0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <std+0x60>)
 8003ee4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <std+0x64>)
 8003ee8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <std+0x68>)
 8003eec:	6224      	str	r4, [r4, #32]
 8003eee:	429c      	cmp	r4, r3
 8003ef0:	d006      	beq.n	8003f00 <std+0x48>
 8003ef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ef6:	4294      	cmp	r4, r2
 8003ef8:	d002      	beq.n	8003f00 <std+0x48>
 8003efa:	33d0      	adds	r3, #208	@ 0xd0
 8003efc:	429c      	cmp	r4, r3
 8003efe:	d105      	bne.n	8003f0c <std+0x54>
 8003f00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f08:	f000 ba78 	b.w	80043fc <__retarget_lock_init_recursive>
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	bf00      	nop
 8003f10:	0800415d 	.word	0x0800415d
 8003f14:	0800417f 	.word	0x0800417f
 8003f18:	080041b7 	.word	0x080041b7
 8003f1c:	080041db 	.word	0x080041db
 8003f20:	200007e4 	.word	0x200007e4

08003f24 <stdio_exit_handler>:
 8003f24:	4a02      	ldr	r2, [pc, #8]	@ (8003f30 <stdio_exit_handler+0xc>)
 8003f26:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <stdio_exit_handler+0x10>)
 8003f28:	4803      	ldr	r0, [pc, #12]	@ (8003f38 <stdio_exit_handler+0x14>)
 8003f2a:	f000 b869 	b.w	8004000 <_fwalk_sglue>
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c
 8003f34:	08004f4d 	.word	0x08004f4d
 8003f38:	2000001c 	.word	0x2000001c

08003f3c <cleanup_stdio>:
 8003f3c:	6841      	ldr	r1, [r0, #4]
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <cleanup_stdio+0x34>)
 8003f40:	4299      	cmp	r1, r3
 8003f42:	b510      	push	{r4, lr}
 8003f44:	4604      	mov	r4, r0
 8003f46:	d001      	beq.n	8003f4c <cleanup_stdio+0x10>
 8003f48:	f001 f800 	bl	8004f4c <_fflush_r>
 8003f4c:	68a1      	ldr	r1, [r4, #8]
 8003f4e:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <cleanup_stdio+0x38>)
 8003f50:	4299      	cmp	r1, r3
 8003f52:	d002      	beq.n	8003f5a <cleanup_stdio+0x1e>
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 fff9 	bl	8004f4c <_fflush_r>
 8003f5a:	68e1      	ldr	r1, [r4, #12]
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <cleanup_stdio+0x3c>)
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	d004      	beq.n	8003f6c <cleanup_stdio+0x30>
 8003f62:	4620      	mov	r0, r4
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f68:	f000 bff0 	b.w	8004f4c <_fflush_r>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	bf00      	nop
 8003f70:	200007e4 	.word	0x200007e4
 8003f74:	2000084c 	.word	0x2000084c
 8003f78:	200008b4 	.word	0x200008b4

08003f7c <global_stdio_init.part.0>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <global_stdio_init.part.0+0x30>)
 8003f80:	4c0b      	ldr	r4, [pc, #44]	@ (8003fb0 <global_stdio_init.part.0+0x34>)
 8003f82:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb4 <global_stdio_init.part.0+0x38>)
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4620      	mov	r0, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	f7ff ff94 	bl	8003eb8 <std>
 8003f90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f94:	2201      	movs	r2, #1
 8003f96:	2109      	movs	r1, #9
 8003f98:	f7ff ff8e 	bl	8003eb8 <std>
 8003f9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa6:	2112      	movs	r1, #18
 8003fa8:	f7ff bf86 	b.w	8003eb8 <std>
 8003fac:	2000091c 	.word	0x2000091c
 8003fb0:	200007e4 	.word	0x200007e4
 8003fb4:	08003f25 	.word	0x08003f25

08003fb8 <__sfp_lock_acquire>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	@ (8003fc0 <__sfp_lock_acquire+0x8>)
 8003fba:	f000 ba20 	b.w	80043fe <__retarget_lock_acquire_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	20000925 	.word	0x20000925

08003fc4 <__sfp_lock_release>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <__sfp_lock_release+0x8>)
 8003fc6:	f000 ba1b 	b.w	8004400 <__retarget_lock_release_recursive>
 8003fca:	bf00      	nop
 8003fcc:	20000925 	.word	0x20000925

08003fd0 <__sinit>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	f7ff fff0 	bl	8003fb8 <__sfp_lock_acquire>
 8003fd8:	6a23      	ldr	r3, [r4, #32]
 8003fda:	b11b      	cbz	r3, 8003fe4 <__sinit+0x14>
 8003fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe0:	f7ff bff0 	b.w	8003fc4 <__sfp_lock_release>
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <__sinit+0x28>)
 8003fe6:	6223      	str	r3, [r4, #32]
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__sinit+0x2c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f5      	bne.n	8003fdc <__sinit+0xc>
 8003ff0:	f7ff ffc4 	bl	8003f7c <global_stdio_init.part.0>
 8003ff4:	e7f2      	b.n	8003fdc <__sinit+0xc>
 8003ff6:	bf00      	nop
 8003ff8:	08003f3d 	.word	0x08003f3d
 8003ffc:	2000091c 	.word	0x2000091c

08004000 <_fwalk_sglue>:
 8004000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004004:	4607      	mov	r7, r0
 8004006:	4688      	mov	r8, r1
 8004008:	4614      	mov	r4, r2
 800400a:	2600      	movs	r6, #0
 800400c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004010:	f1b9 0901 	subs.w	r9, r9, #1
 8004014:	d505      	bpl.n	8004022 <_fwalk_sglue+0x22>
 8004016:	6824      	ldr	r4, [r4, #0]
 8004018:	2c00      	cmp	r4, #0
 800401a:	d1f7      	bne.n	800400c <_fwalk_sglue+0xc>
 800401c:	4630      	mov	r0, r6
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d907      	bls.n	8004038 <_fwalk_sglue+0x38>
 8004028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800402c:	3301      	adds	r3, #1
 800402e:	d003      	beq.n	8004038 <_fwalk_sglue+0x38>
 8004030:	4629      	mov	r1, r5
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	4306      	orrs	r6, r0
 8004038:	3568      	adds	r5, #104	@ 0x68
 800403a:	e7e9      	b.n	8004010 <_fwalk_sglue+0x10>

0800403c <iprintf>:
 800403c:	b40f      	push	{r0, r1, r2, r3}
 800403e:	b507      	push	{r0, r1, r2, lr}
 8004040:	4906      	ldr	r1, [pc, #24]	@ (800405c <iprintf+0x20>)
 8004042:	ab04      	add	r3, sp, #16
 8004044:	6808      	ldr	r0, [r1, #0]
 8004046:	f853 2b04 	ldr.w	r2, [r3], #4
 800404a:	6881      	ldr	r1, [r0, #8]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	f000 fc53 	bl	80048f8 <_vfiprintf_r>
 8004052:	b003      	add	sp, #12
 8004054:	f85d eb04 	ldr.w	lr, [sp], #4
 8004058:	b004      	add	sp, #16
 800405a:	4770      	bx	lr
 800405c:	20000018 	.word	0x20000018

08004060 <_puts_r>:
 8004060:	6a03      	ldr	r3, [r0, #32]
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	6884      	ldr	r4, [r0, #8]
 8004066:	4605      	mov	r5, r0
 8004068:	460e      	mov	r6, r1
 800406a:	b90b      	cbnz	r3, 8004070 <_puts_r+0x10>
 800406c:	f7ff ffb0 	bl	8003fd0 <__sinit>
 8004070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004072:	07db      	lsls	r3, r3, #31
 8004074:	d405      	bmi.n	8004082 <_puts_r+0x22>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	0598      	lsls	r0, r3, #22
 800407a:	d402      	bmi.n	8004082 <_puts_r+0x22>
 800407c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800407e:	f000 f9be 	bl	80043fe <__retarget_lock_acquire_recursive>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	0719      	lsls	r1, r3, #28
 8004086:	d502      	bpl.n	800408e <_puts_r+0x2e>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d135      	bne.n	80040fa <_puts_r+0x9a>
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f8e5 	bl	8004260 <__swsetup_r>
 8004096:	b380      	cbz	r0, 80040fa <_puts_r+0x9a>
 8004098:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800409c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800409e:	07da      	lsls	r2, r3, #31
 80040a0:	d405      	bmi.n	80040ae <_puts_r+0x4e>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	059b      	lsls	r3, r3, #22
 80040a6:	d402      	bmi.n	80040ae <_puts_r+0x4e>
 80040a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040aa:	f000 f9a9 	bl	8004400 <__retarget_lock_release_recursive>
 80040ae:	4628      	mov	r0, r5
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da04      	bge.n	80040c0 <_puts_r+0x60>
 80040b6:	69a2      	ldr	r2, [r4, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dc17      	bgt.n	80040ec <_puts_r+0x8c>
 80040bc:	290a      	cmp	r1, #10
 80040be:	d015      	beq.n	80040ec <_puts_r+0x8c>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	6022      	str	r2, [r4, #0]
 80040c6:	7019      	strb	r1, [r3, #0]
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ce:	3b01      	subs	r3, #1
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d1ed      	bne.n	80040b2 <_puts_r+0x52>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da11      	bge.n	80040fe <_puts_r+0x9e>
 80040da:	4622      	mov	r2, r4
 80040dc:	210a      	movs	r1, #10
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f87f 	bl	80041e2 <__swbuf_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d0d7      	beq.n	8004098 <_puts_r+0x38>
 80040e8:	250a      	movs	r5, #10
 80040ea:	e7d7      	b.n	800409c <_puts_r+0x3c>
 80040ec:	4622      	mov	r2, r4
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f877 	bl	80041e2 <__swbuf_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1e7      	bne.n	80040c8 <_puts_r+0x68>
 80040f8:	e7ce      	b.n	8004098 <_puts_r+0x38>
 80040fa:	3e01      	subs	r6, #1
 80040fc:	e7e4      	b.n	80040c8 <_puts_r+0x68>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	220a      	movs	r2, #10
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e7ee      	b.n	80040e8 <_puts_r+0x88>
	...

0800410c <puts>:
 800410c:	4b02      	ldr	r3, [pc, #8]	@ (8004118 <puts+0xc>)
 800410e:	4601      	mov	r1, r0
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f7ff bfa5 	b.w	8004060 <_puts_r>
 8004116:	bf00      	nop
 8004118:	20000018 	.word	0x20000018

0800411c <siprintf>:
 800411c:	b40e      	push	{r1, r2, r3}
 800411e:	b500      	push	{lr}
 8004120:	b09c      	sub	sp, #112	@ 0x70
 8004122:	ab1d      	add	r3, sp, #116	@ 0x74
 8004124:	9002      	str	r0, [sp, #8]
 8004126:	9006      	str	r0, [sp, #24]
 8004128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800412c:	4809      	ldr	r0, [pc, #36]	@ (8004154 <siprintf+0x38>)
 800412e:	9107      	str	r1, [sp, #28]
 8004130:	9104      	str	r1, [sp, #16]
 8004132:	4909      	ldr	r1, [pc, #36]	@ (8004158 <siprintf+0x3c>)
 8004134:	f853 2b04 	ldr.w	r2, [r3], #4
 8004138:	9105      	str	r1, [sp, #20]
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	a902      	add	r1, sp, #8
 8004140:	f000 fab4 	bl	80046ac <_svfiprintf_r>
 8004144:	9b02      	ldr	r3, [sp, #8]
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	b01c      	add	sp, #112	@ 0x70
 800414c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004150:	b003      	add	sp, #12
 8004152:	4770      	bx	lr
 8004154:	20000018 	.word	0x20000018
 8004158:	ffff0208 	.word	0xffff0208

0800415c <__sread>:
 800415c:	b510      	push	{r4, lr}
 800415e:	460c      	mov	r4, r1
 8004160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004164:	f000 f8fc 	bl	8004360 <_read_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	bfab      	itete	ge
 800416c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800416e:	89a3      	ldrhlt	r3, [r4, #12]
 8004170:	181b      	addge	r3, r3, r0
 8004172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004176:	bfac      	ite	ge
 8004178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800417a:	81a3      	strhlt	r3, [r4, #12]
 800417c:	bd10      	pop	{r4, pc}

0800417e <__swrite>:
 800417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	461f      	mov	r7, r3
 8004184:	898b      	ldrh	r3, [r1, #12]
 8004186:	05db      	lsls	r3, r3, #23
 8004188:	4605      	mov	r5, r0
 800418a:	460c      	mov	r4, r1
 800418c:	4616      	mov	r6, r2
 800418e:	d505      	bpl.n	800419c <__swrite+0x1e>
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	2302      	movs	r3, #2
 8004196:	2200      	movs	r2, #0
 8004198:	f000 f8d0 	bl	800433c <_lseek_r>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	4628      	mov	r0, r5
 80041ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	f000 b8e7 	b.w	8004384 <_write_r>

080041b6 <__sseek>:
 80041b6:	b510      	push	{r4, lr}
 80041b8:	460c      	mov	r4, r1
 80041ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041be:	f000 f8bd 	bl	800433c <_lseek_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	bf15      	itete	ne
 80041c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041d2:	81a3      	strheq	r3, [r4, #12]
 80041d4:	bf18      	it	ne
 80041d6:	81a3      	strhne	r3, [r4, #12]
 80041d8:	bd10      	pop	{r4, pc}

080041da <__sclose>:
 80041da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041de:	f000 b89d 	b.w	800431c <_close_r>

080041e2 <__swbuf_r>:
 80041e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e4:	460e      	mov	r6, r1
 80041e6:	4614      	mov	r4, r2
 80041e8:	4605      	mov	r5, r0
 80041ea:	b118      	cbz	r0, 80041f4 <__swbuf_r+0x12>
 80041ec:	6a03      	ldr	r3, [r0, #32]
 80041ee:	b90b      	cbnz	r3, 80041f4 <__swbuf_r+0x12>
 80041f0:	f7ff feee 	bl	8003fd0 <__sinit>
 80041f4:	69a3      	ldr	r3, [r4, #24]
 80041f6:	60a3      	str	r3, [r4, #8]
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	071a      	lsls	r2, r3, #28
 80041fc:	d501      	bpl.n	8004202 <__swbuf_r+0x20>
 80041fe:	6923      	ldr	r3, [r4, #16]
 8004200:	b943      	cbnz	r3, 8004214 <__swbuf_r+0x32>
 8004202:	4621      	mov	r1, r4
 8004204:	4628      	mov	r0, r5
 8004206:	f000 f82b 	bl	8004260 <__swsetup_r>
 800420a:	b118      	cbz	r0, 8004214 <__swbuf_r+0x32>
 800420c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004210:	4638      	mov	r0, r7
 8004212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	6922      	ldr	r2, [r4, #16]
 8004218:	1a98      	subs	r0, r3, r2
 800421a:	6963      	ldr	r3, [r4, #20]
 800421c:	b2f6      	uxtb	r6, r6
 800421e:	4283      	cmp	r3, r0
 8004220:	4637      	mov	r7, r6
 8004222:	dc05      	bgt.n	8004230 <__swbuf_r+0x4e>
 8004224:	4621      	mov	r1, r4
 8004226:	4628      	mov	r0, r5
 8004228:	f000 fe90 	bl	8004f4c <_fflush_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	d1ed      	bne.n	800420c <__swbuf_r+0x2a>
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	60a3      	str	r3, [r4, #8]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	701e      	strb	r6, [r3, #0]
 800423e:	6962      	ldr	r2, [r4, #20]
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	429a      	cmp	r2, r3
 8004244:	d004      	beq.n	8004250 <__swbuf_r+0x6e>
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	07db      	lsls	r3, r3, #31
 800424a:	d5e1      	bpl.n	8004210 <__swbuf_r+0x2e>
 800424c:	2e0a      	cmp	r6, #10
 800424e:	d1df      	bne.n	8004210 <__swbuf_r+0x2e>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 fe7a 	bl	8004f4c <_fflush_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d0d9      	beq.n	8004210 <__swbuf_r+0x2e>
 800425c:	e7d6      	b.n	800420c <__swbuf_r+0x2a>
	...

08004260 <__swsetup_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <__swsetup_r+0xa8>)
 8004264:	4605      	mov	r5, r0
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	460c      	mov	r4, r1
 800426a:	b118      	cbz	r0, 8004274 <__swsetup_r+0x14>
 800426c:	6a03      	ldr	r3, [r0, #32]
 800426e:	b90b      	cbnz	r3, 8004274 <__swsetup_r+0x14>
 8004270:	f7ff feae 	bl	8003fd0 <__sinit>
 8004274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004278:	0719      	lsls	r1, r3, #28
 800427a:	d422      	bmi.n	80042c2 <__swsetup_r+0x62>
 800427c:	06da      	lsls	r2, r3, #27
 800427e:	d407      	bmi.n	8004290 <__swsetup_r+0x30>
 8004280:	2209      	movs	r2, #9
 8004282:	602a      	str	r2, [r5, #0]
 8004284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800428e:	e033      	b.n	80042f8 <__swsetup_r+0x98>
 8004290:	0758      	lsls	r0, r3, #29
 8004292:	d512      	bpl.n	80042ba <__swsetup_r+0x5a>
 8004294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004296:	b141      	cbz	r1, 80042aa <__swsetup_r+0x4a>
 8004298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800429c:	4299      	cmp	r1, r3
 800429e:	d002      	beq.n	80042a6 <__swsetup_r+0x46>
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 f8af 	bl	8004404 <_free_r>
 80042a6:	2300      	movs	r3, #0
 80042a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	2300      	movs	r3, #0
 80042b4:	6063      	str	r3, [r4, #4]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	b94b      	cbnz	r3, 80042da <__swsetup_r+0x7a>
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d0:	d003      	beq.n	80042da <__swsetup_r+0x7a>
 80042d2:	4621      	mov	r1, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 fe87 	bl	8004fe8 <__smakebuf_r>
 80042da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042de:	f013 0201 	ands.w	r2, r3, #1
 80042e2:	d00a      	beq.n	80042fa <__swsetup_r+0x9a>
 80042e4:	2200      	movs	r2, #0
 80042e6:	60a2      	str	r2, [r4, #8]
 80042e8:	6962      	ldr	r2, [r4, #20]
 80042ea:	4252      	negs	r2, r2
 80042ec:	61a2      	str	r2, [r4, #24]
 80042ee:	6922      	ldr	r2, [r4, #16]
 80042f0:	b942      	cbnz	r2, 8004304 <__swsetup_r+0xa4>
 80042f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042f6:	d1c5      	bne.n	8004284 <__swsetup_r+0x24>
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	0799      	lsls	r1, r3, #30
 80042fc:	bf58      	it	pl
 80042fe:	6962      	ldrpl	r2, [r4, #20]
 8004300:	60a2      	str	r2, [r4, #8]
 8004302:	e7f4      	b.n	80042ee <__swsetup_r+0x8e>
 8004304:	2000      	movs	r0, #0
 8004306:	e7f7      	b.n	80042f8 <__swsetup_r+0x98>
 8004308:	20000018 	.word	0x20000018

0800430c <memset>:
 800430c:	4402      	add	r2, r0
 800430e:	4603      	mov	r3, r0
 8004310:	4293      	cmp	r3, r2
 8004312:	d100      	bne.n	8004316 <memset+0xa>
 8004314:	4770      	bx	lr
 8004316:	f803 1b01 	strb.w	r1, [r3], #1
 800431a:	e7f9      	b.n	8004310 <memset+0x4>

0800431c <_close_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d06      	ldr	r5, [pc, #24]	@ (8004338 <_close_r+0x1c>)
 8004320:	2300      	movs	r3, #0
 8004322:	4604      	mov	r4, r0
 8004324:	4608      	mov	r0, r1
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	f7fc fbc1 	bl	8000aae <_close>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_close_r+0x1a>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_close_r+0x1a>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	20000920 	.word	0x20000920

0800433c <_lseek_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d07      	ldr	r5, [pc, #28]	@ (800435c <_lseek_r+0x20>)
 8004340:	4604      	mov	r4, r0
 8004342:	4608      	mov	r0, r1
 8004344:	4611      	mov	r1, r2
 8004346:	2200      	movs	r2, #0
 8004348:	602a      	str	r2, [r5, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f7fc fbd6 	bl	8000afc <_lseek>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_lseek_r+0x1e>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_lseek_r+0x1e>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	20000920 	.word	0x20000920

08004360 <_read_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d07      	ldr	r5, [pc, #28]	@ (8004380 <_read_r+0x20>)
 8004364:	4604      	mov	r4, r0
 8004366:	4608      	mov	r0, r1
 8004368:	4611      	mov	r1, r2
 800436a:	2200      	movs	r2, #0
 800436c:	602a      	str	r2, [r5, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	f7fc fb80 	bl	8000a74 <_read>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_read_r+0x1e>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_read_r+0x1e>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	20000920 	.word	0x20000920

08004384 <_write_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4d07      	ldr	r5, [pc, #28]	@ (80043a4 <_write_r+0x20>)
 8004388:	4604      	mov	r4, r0
 800438a:	4608      	mov	r0, r1
 800438c:	4611      	mov	r1, r2
 800438e:	2200      	movs	r2, #0
 8004390:	602a      	str	r2, [r5, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7ff fd7a 	bl	8003e8c <_write>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_write_r+0x1e>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_write_r+0x1e>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000920 	.word	0x20000920

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	@ (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000018 	.word	0x20000018

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	@ (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	@ (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	@ (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	@ (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 feda 	bl	8005180 <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	080052a4 	.word	0x080052a4
 80043f0:	080052a4 	.word	0x080052a4
 80043f4:	080052a4 	.word	0x080052a4
 80043f8:	080052a8 	.word	0x080052a8

080043fc <__retarget_lock_init_recursive>:
 80043fc:	4770      	bx	lr

080043fe <__retarget_lock_acquire_recursive>:
 80043fe:	4770      	bx	lr

08004400 <__retarget_lock_release_recursive>:
 8004400:	4770      	bx	lr
	...

08004404 <_free_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4605      	mov	r5, r0
 8004408:	2900      	cmp	r1, #0
 800440a:	d041      	beq.n	8004490 <_free_r+0x8c>
 800440c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004410:	1f0c      	subs	r4, r1, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	bfb8      	it	lt
 8004416:	18e4      	addlt	r4, r4, r3
 8004418:	f000 f8e0 	bl	80045dc <__malloc_lock>
 800441c:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <_free_r+0x90>)
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	b933      	cbnz	r3, 8004430 <_free_r+0x2c>
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	6014      	str	r4, [r2, #0]
 8004426:	4628      	mov	r0, r5
 8004428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800442c:	f000 b8dc 	b.w	80045e8 <__malloc_unlock>
 8004430:	42a3      	cmp	r3, r4
 8004432:	d908      	bls.n	8004446 <_free_r+0x42>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	1821      	adds	r1, r4, r0
 8004438:	428b      	cmp	r3, r1
 800443a:	bf01      	itttt	eq
 800443c:	6819      	ldreq	r1, [r3, #0]
 800443e:	685b      	ldreq	r3, [r3, #4]
 8004440:	1809      	addeq	r1, r1, r0
 8004442:	6021      	streq	r1, [r4, #0]
 8004444:	e7ed      	b.n	8004422 <_free_r+0x1e>
 8004446:	461a      	mov	r2, r3
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b10b      	cbz	r3, 8004450 <_free_r+0x4c>
 800444c:	42a3      	cmp	r3, r4
 800444e:	d9fa      	bls.n	8004446 <_free_r+0x42>
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	1850      	adds	r0, r2, r1
 8004454:	42a0      	cmp	r0, r4
 8004456:	d10b      	bne.n	8004470 <_free_r+0x6c>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	4401      	add	r1, r0
 800445c:	1850      	adds	r0, r2, r1
 800445e:	4283      	cmp	r3, r0
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	d1e0      	bne.n	8004426 <_free_r+0x22>
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	6053      	str	r3, [r2, #4]
 800446a:	4408      	add	r0, r1
 800446c:	6010      	str	r0, [r2, #0]
 800446e:	e7da      	b.n	8004426 <_free_r+0x22>
 8004470:	d902      	bls.n	8004478 <_free_r+0x74>
 8004472:	230c      	movs	r3, #12
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	e7d6      	b.n	8004426 <_free_r+0x22>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	1821      	adds	r1, r4, r0
 800447c:	428b      	cmp	r3, r1
 800447e:	bf04      	itt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	6063      	str	r3, [r4, #4]
 8004486:	bf04      	itt	eq
 8004488:	1809      	addeq	r1, r1, r0
 800448a:	6021      	streq	r1, [r4, #0]
 800448c:	6054      	str	r4, [r2, #4]
 800448e:	e7ca      	b.n	8004426 <_free_r+0x22>
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	2000092c 	.word	0x2000092c

08004498 <sbrk_aligned>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4e0f      	ldr	r6, [pc, #60]	@ (80044d8 <sbrk_aligned+0x40>)
 800449c:	460c      	mov	r4, r1
 800449e:	6831      	ldr	r1, [r6, #0]
 80044a0:	4605      	mov	r5, r0
 80044a2:	b911      	cbnz	r1, 80044aa <sbrk_aligned+0x12>
 80044a4:	f000 fe18 	bl	80050d8 <_sbrk_r>
 80044a8:	6030      	str	r0, [r6, #0]
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 fe13 	bl	80050d8 <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d103      	bne.n	80044be <sbrk_aligned+0x26>
 80044b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80044ba:	4620      	mov	r0, r4
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	1cc4      	adds	r4, r0, #3
 80044c0:	f024 0403 	bic.w	r4, r4, #3
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d0f8      	beq.n	80044ba <sbrk_aligned+0x22>
 80044c8:	1a21      	subs	r1, r4, r0
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 fe04 	bl	80050d8 <_sbrk_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d1f2      	bne.n	80044ba <sbrk_aligned+0x22>
 80044d4:	e7ef      	b.n	80044b6 <sbrk_aligned+0x1e>
 80044d6:	bf00      	nop
 80044d8:	20000928 	.word	0x20000928

080044dc <_malloc_r>:
 80044dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e0:	1ccd      	adds	r5, r1, #3
 80044e2:	f025 0503 	bic.w	r5, r5, #3
 80044e6:	3508      	adds	r5, #8
 80044e8:	2d0c      	cmp	r5, #12
 80044ea:	bf38      	it	cc
 80044ec:	250c      	movcc	r5, #12
 80044ee:	2d00      	cmp	r5, #0
 80044f0:	4606      	mov	r6, r0
 80044f2:	db01      	blt.n	80044f8 <_malloc_r+0x1c>
 80044f4:	42a9      	cmp	r1, r5
 80044f6:	d904      	bls.n	8004502 <_malloc_r+0x26>
 80044f8:	230c      	movs	r3, #12
 80044fa:	6033      	str	r3, [r6, #0]
 80044fc:	2000      	movs	r0, #0
 80044fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045d8 <_malloc_r+0xfc>
 8004506:	f000 f869 	bl	80045dc <__malloc_lock>
 800450a:	f8d8 3000 	ldr.w	r3, [r8]
 800450e:	461c      	mov	r4, r3
 8004510:	bb44      	cbnz	r4, 8004564 <_malloc_r+0x88>
 8004512:	4629      	mov	r1, r5
 8004514:	4630      	mov	r0, r6
 8004516:	f7ff ffbf 	bl	8004498 <sbrk_aligned>
 800451a:	1c43      	adds	r3, r0, #1
 800451c:	4604      	mov	r4, r0
 800451e:	d158      	bne.n	80045d2 <_malloc_r+0xf6>
 8004520:	f8d8 4000 	ldr.w	r4, [r8]
 8004524:	4627      	mov	r7, r4
 8004526:	2f00      	cmp	r7, #0
 8004528:	d143      	bne.n	80045b2 <_malloc_r+0xd6>
 800452a:	2c00      	cmp	r4, #0
 800452c:	d04b      	beq.n	80045c6 <_malloc_r+0xea>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4639      	mov	r1, r7
 8004532:	4630      	mov	r0, r6
 8004534:	eb04 0903 	add.w	r9, r4, r3
 8004538:	f000 fdce 	bl	80050d8 <_sbrk_r>
 800453c:	4581      	cmp	r9, r0
 800453e:	d142      	bne.n	80045c6 <_malloc_r+0xea>
 8004540:	6821      	ldr	r1, [r4, #0]
 8004542:	1a6d      	subs	r5, r5, r1
 8004544:	4629      	mov	r1, r5
 8004546:	4630      	mov	r0, r6
 8004548:	f7ff ffa6 	bl	8004498 <sbrk_aligned>
 800454c:	3001      	adds	r0, #1
 800454e:	d03a      	beq.n	80045c6 <_malloc_r+0xea>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	442b      	add	r3, r5
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	f8d8 3000 	ldr.w	r3, [r8]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	bb62      	cbnz	r2, 80045b8 <_malloc_r+0xdc>
 800455e:	f8c8 7000 	str.w	r7, [r8]
 8004562:	e00f      	b.n	8004584 <_malloc_r+0xa8>
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	1b52      	subs	r2, r2, r5
 8004568:	d420      	bmi.n	80045ac <_malloc_r+0xd0>
 800456a:	2a0b      	cmp	r2, #11
 800456c:	d917      	bls.n	800459e <_malloc_r+0xc2>
 800456e:	1961      	adds	r1, r4, r5
 8004570:	42a3      	cmp	r3, r4
 8004572:	6025      	str	r5, [r4, #0]
 8004574:	bf18      	it	ne
 8004576:	6059      	strne	r1, [r3, #4]
 8004578:	6863      	ldr	r3, [r4, #4]
 800457a:	bf08      	it	eq
 800457c:	f8c8 1000 	streq.w	r1, [r8]
 8004580:	5162      	str	r2, [r4, r5]
 8004582:	604b      	str	r3, [r1, #4]
 8004584:	4630      	mov	r0, r6
 8004586:	f000 f82f 	bl	80045e8 <__malloc_unlock>
 800458a:	f104 000b 	add.w	r0, r4, #11
 800458e:	1d23      	adds	r3, r4, #4
 8004590:	f020 0007 	bic.w	r0, r0, #7
 8004594:	1ac2      	subs	r2, r0, r3
 8004596:	bf1c      	itt	ne
 8004598:	1a1b      	subne	r3, r3, r0
 800459a:	50a3      	strne	r3, [r4, r2]
 800459c:	e7af      	b.n	80044fe <_malloc_r+0x22>
 800459e:	6862      	ldr	r2, [r4, #4]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	bf0c      	ite	eq
 80045a4:	f8c8 2000 	streq.w	r2, [r8]
 80045a8:	605a      	strne	r2, [r3, #4]
 80045aa:	e7eb      	b.n	8004584 <_malloc_r+0xa8>
 80045ac:	4623      	mov	r3, r4
 80045ae:	6864      	ldr	r4, [r4, #4]
 80045b0:	e7ae      	b.n	8004510 <_malloc_r+0x34>
 80045b2:	463c      	mov	r4, r7
 80045b4:	687f      	ldr	r7, [r7, #4]
 80045b6:	e7b6      	b.n	8004526 <_malloc_r+0x4a>
 80045b8:	461a      	mov	r2, r3
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d1fb      	bne.n	80045b8 <_malloc_r+0xdc>
 80045c0:	2300      	movs	r3, #0
 80045c2:	6053      	str	r3, [r2, #4]
 80045c4:	e7de      	b.n	8004584 <_malloc_r+0xa8>
 80045c6:	230c      	movs	r3, #12
 80045c8:	6033      	str	r3, [r6, #0]
 80045ca:	4630      	mov	r0, r6
 80045cc:	f000 f80c 	bl	80045e8 <__malloc_unlock>
 80045d0:	e794      	b.n	80044fc <_malloc_r+0x20>
 80045d2:	6005      	str	r5, [r0, #0]
 80045d4:	e7d6      	b.n	8004584 <_malloc_r+0xa8>
 80045d6:	bf00      	nop
 80045d8:	2000092c 	.word	0x2000092c

080045dc <__malloc_lock>:
 80045dc:	4801      	ldr	r0, [pc, #4]	@ (80045e4 <__malloc_lock+0x8>)
 80045de:	f7ff bf0e 	b.w	80043fe <__retarget_lock_acquire_recursive>
 80045e2:	bf00      	nop
 80045e4:	20000924 	.word	0x20000924

080045e8 <__malloc_unlock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	@ (80045f0 <__malloc_unlock+0x8>)
 80045ea:	f7ff bf09 	b.w	8004400 <__retarget_lock_release_recursive>
 80045ee:	bf00      	nop
 80045f0:	20000924 	.word	0x20000924

080045f4 <__ssputs_r>:
 80045f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	688e      	ldr	r6, [r1, #8]
 80045fa:	461f      	mov	r7, r3
 80045fc:	42be      	cmp	r6, r7
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	4682      	mov	sl, r0
 8004602:	460c      	mov	r4, r1
 8004604:	4690      	mov	r8, r2
 8004606:	d82d      	bhi.n	8004664 <__ssputs_r+0x70>
 8004608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800460c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004610:	d026      	beq.n	8004660 <__ssputs_r+0x6c>
 8004612:	6965      	ldr	r5, [r4, #20]
 8004614:	6909      	ldr	r1, [r1, #16]
 8004616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800461a:	eba3 0901 	sub.w	r9, r3, r1
 800461e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004622:	1c7b      	adds	r3, r7, #1
 8004624:	444b      	add	r3, r9
 8004626:	106d      	asrs	r5, r5, #1
 8004628:	429d      	cmp	r5, r3
 800462a:	bf38      	it	cc
 800462c:	461d      	movcc	r5, r3
 800462e:	0553      	lsls	r3, r2, #21
 8004630:	d527      	bpl.n	8004682 <__ssputs_r+0x8e>
 8004632:	4629      	mov	r1, r5
 8004634:	f7ff ff52 	bl	80044dc <_malloc_r>
 8004638:	4606      	mov	r6, r0
 800463a:	b360      	cbz	r0, 8004696 <__ssputs_r+0xa2>
 800463c:	6921      	ldr	r1, [r4, #16]
 800463e:	464a      	mov	r2, r9
 8004640:	f000 fd5a 	bl	80050f8 <memcpy>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800464a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	6126      	str	r6, [r4, #16]
 8004652:	6165      	str	r5, [r4, #20]
 8004654:	444e      	add	r6, r9
 8004656:	eba5 0509 	sub.w	r5, r5, r9
 800465a:	6026      	str	r6, [r4, #0]
 800465c:	60a5      	str	r5, [r4, #8]
 800465e:	463e      	mov	r6, r7
 8004660:	42be      	cmp	r6, r7
 8004662:	d900      	bls.n	8004666 <__ssputs_r+0x72>
 8004664:	463e      	mov	r6, r7
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	4632      	mov	r2, r6
 800466a:	4641      	mov	r1, r8
 800466c:	f000 fcf8 	bl	8005060 <memmove>
 8004670:	68a3      	ldr	r3, [r4, #8]
 8004672:	1b9b      	subs	r3, r3, r6
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	4433      	add	r3, r6
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2000      	movs	r0, #0
 800467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004682:	462a      	mov	r2, r5
 8004684:	f000 fd46 	bl	8005114 <_realloc_r>
 8004688:	4606      	mov	r6, r0
 800468a:	2800      	cmp	r0, #0
 800468c:	d1e0      	bne.n	8004650 <__ssputs_r+0x5c>
 800468e:	6921      	ldr	r1, [r4, #16]
 8004690:	4650      	mov	r0, sl
 8004692:	f7ff feb7 	bl	8004404 <_free_r>
 8004696:	230c      	movs	r3, #12
 8004698:	f8ca 3000 	str.w	r3, [sl]
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046a8:	e7e9      	b.n	800467e <__ssputs_r+0x8a>
	...

080046ac <_svfiprintf_r>:
 80046ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	4698      	mov	r8, r3
 80046b2:	898b      	ldrh	r3, [r1, #12]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	b09d      	sub	sp, #116	@ 0x74
 80046b8:	4607      	mov	r7, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	4614      	mov	r4, r2
 80046be:	d510      	bpl.n	80046e2 <_svfiprintf_r+0x36>
 80046c0:	690b      	ldr	r3, [r1, #16]
 80046c2:	b973      	cbnz	r3, 80046e2 <_svfiprintf_r+0x36>
 80046c4:	2140      	movs	r1, #64	@ 0x40
 80046c6:	f7ff ff09 	bl	80044dc <_malloc_r>
 80046ca:	6028      	str	r0, [r5, #0]
 80046cc:	6128      	str	r0, [r5, #16]
 80046ce:	b930      	cbnz	r0, 80046de <_svfiprintf_r+0x32>
 80046d0:	230c      	movs	r3, #12
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046d8:	b01d      	add	sp, #116	@ 0x74
 80046da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046de:	2340      	movs	r3, #64	@ 0x40
 80046e0:	616b      	str	r3, [r5, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e6:	2320      	movs	r3, #32
 80046e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f0:	2330      	movs	r3, #48	@ 0x30
 80046f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004890 <_svfiprintf_r+0x1e4>
 80046f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046fa:	f04f 0901 	mov.w	r9, #1
 80046fe:	4623      	mov	r3, r4
 8004700:	469a      	mov	sl, r3
 8004702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004706:	b10a      	cbz	r2, 800470c <_svfiprintf_r+0x60>
 8004708:	2a25      	cmp	r2, #37	@ 0x25
 800470a:	d1f9      	bne.n	8004700 <_svfiprintf_r+0x54>
 800470c:	ebba 0b04 	subs.w	fp, sl, r4
 8004710:	d00b      	beq.n	800472a <_svfiprintf_r+0x7e>
 8004712:	465b      	mov	r3, fp
 8004714:	4622      	mov	r2, r4
 8004716:	4629      	mov	r1, r5
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff ff6b 	bl	80045f4 <__ssputs_r>
 800471e:	3001      	adds	r0, #1
 8004720:	f000 80a7 	beq.w	8004872 <_svfiprintf_r+0x1c6>
 8004724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004726:	445a      	add	r2, fp
 8004728:	9209      	str	r2, [sp, #36]	@ 0x24
 800472a:	f89a 3000 	ldrb.w	r3, [sl]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 809f 	beq.w	8004872 <_svfiprintf_r+0x1c6>
 8004734:	2300      	movs	r3, #0
 8004736:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800473a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473e:	f10a 0a01 	add.w	sl, sl, #1
 8004742:	9304      	str	r3, [sp, #16]
 8004744:	9307      	str	r3, [sp, #28]
 8004746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800474a:	931a      	str	r3, [sp, #104]	@ 0x68
 800474c:	4654      	mov	r4, sl
 800474e:	2205      	movs	r2, #5
 8004750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004754:	484e      	ldr	r0, [pc, #312]	@ (8004890 <_svfiprintf_r+0x1e4>)
 8004756:	f7fb fd5b 	bl	8000210 <memchr>
 800475a:	9a04      	ldr	r2, [sp, #16]
 800475c:	b9d8      	cbnz	r0, 8004796 <_svfiprintf_r+0xea>
 800475e:	06d0      	lsls	r0, r2, #27
 8004760:	bf44      	itt	mi
 8004762:	2320      	movmi	r3, #32
 8004764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004768:	0711      	lsls	r1, r2, #28
 800476a:	bf44      	itt	mi
 800476c:	232b      	movmi	r3, #43	@ 0x2b
 800476e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004772:	f89a 3000 	ldrb.w	r3, [sl]
 8004776:	2b2a      	cmp	r3, #42	@ 0x2a
 8004778:	d015      	beq.n	80047a6 <_svfiprintf_r+0xfa>
 800477a:	9a07      	ldr	r2, [sp, #28]
 800477c:	4654      	mov	r4, sl
 800477e:	2000      	movs	r0, #0
 8004780:	f04f 0c0a 	mov.w	ip, #10
 8004784:	4621      	mov	r1, r4
 8004786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478a:	3b30      	subs	r3, #48	@ 0x30
 800478c:	2b09      	cmp	r3, #9
 800478e:	d94b      	bls.n	8004828 <_svfiprintf_r+0x17c>
 8004790:	b1b0      	cbz	r0, 80047c0 <_svfiprintf_r+0x114>
 8004792:	9207      	str	r2, [sp, #28]
 8004794:	e014      	b.n	80047c0 <_svfiprintf_r+0x114>
 8004796:	eba0 0308 	sub.w	r3, r0, r8
 800479a:	fa09 f303 	lsl.w	r3, r9, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	46a2      	mov	sl, r4
 80047a4:	e7d2      	b.n	800474c <_svfiprintf_r+0xa0>
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	9103      	str	r1, [sp, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfbb      	ittet	lt
 80047b2:	425b      	neglt	r3, r3
 80047b4:	f042 0202 	orrlt.w	r2, r2, #2
 80047b8:	9307      	strge	r3, [sp, #28]
 80047ba:	9307      	strlt	r3, [sp, #28]
 80047bc:	bfb8      	it	lt
 80047be:	9204      	strlt	r2, [sp, #16]
 80047c0:	7823      	ldrb	r3, [r4, #0]
 80047c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80047c4:	d10a      	bne.n	80047dc <_svfiprintf_r+0x130>
 80047c6:	7863      	ldrb	r3, [r4, #1]
 80047c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ca:	d132      	bne.n	8004832 <_svfiprintf_r+0x186>
 80047cc:	9b03      	ldr	r3, [sp, #12]
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047d8:	3402      	adds	r4, #2
 80047da:	9305      	str	r3, [sp, #20]
 80047dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048a0 <_svfiprintf_r+0x1f4>
 80047e0:	7821      	ldrb	r1, [r4, #0]
 80047e2:	2203      	movs	r2, #3
 80047e4:	4650      	mov	r0, sl
 80047e6:	f7fb fd13 	bl	8000210 <memchr>
 80047ea:	b138      	cbz	r0, 80047fc <_svfiprintf_r+0x150>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	eba0 000a 	sub.w	r0, r0, sl
 80047f2:	2240      	movs	r2, #64	@ 0x40
 80047f4:	4082      	lsls	r2, r0
 80047f6:	4313      	orrs	r3, r2
 80047f8:	3401      	adds	r4, #1
 80047fa:	9304      	str	r3, [sp, #16]
 80047fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004800:	4824      	ldr	r0, [pc, #144]	@ (8004894 <_svfiprintf_r+0x1e8>)
 8004802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004806:	2206      	movs	r2, #6
 8004808:	f7fb fd02 	bl	8000210 <memchr>
 800480c:	2800      	cmp	r0, #0
 800480e:	d036      	beq.n	800487e <_svfiprintf_r+0x1d2>
 8004810:	4b21      	ldr	r3, [pc, #132]	@ (8004898 <_svfiprintf_r+0x1ec>)
 8004812:	bb1b      	cbnz	r3, 800485c <_svfiprintf_r+0x1b0>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	3307      	adds	r3, #7
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	3308      	adds	r3, #8
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004822:	4433      	add	r3, r6
 8004824:	9309      	str	r3, [sp, #36]	@ 0x24
 8004826:	e76a      	b.n	80046fe <_svfiprintf_r+0x52>
 8004828:	fb0c 3202 	mla	r2, ip, r2, r3
 800482c:	460c      	mov	r4, r1
 800482e:	2001      	movs	r0, #1
 8004830:	e7a8      	b.n	8004784 <_svfiprintf_r+0xd8>
 8004832:	2300      	movs	r3, #0
 8004834:	3401      	adds	r4, #1
 8004836:	9305      	str	r3, [sp, #20]
 8004838:	4619      	mov	r1, r3
 800483a:	f04f 0c0a 	mov.w	ip, #10
 800483e:	4620      	mov	r0, r4
 8004840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004844:	3a30      	subs	r2, #48	@ 0x30
 8004846:	2a09      	cmp	r2, #9
 8004848:	d903      	bls.n	8004852 <_svfiprintf_r+0x1a6>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c6      	beq.n	80047dc <_svfiprintf_r+0x130>
 800484e:	9105      	str	r1, [sp, #20]
 8004850:	e7c4      	b.n	80047dc <_svfiprintf_r+0x130>
 8004852:	fb0c 2101 	mla	r1, ip, r1, r2
 8004856:	4604      	mov	r4, r0
 8004858:	2301      	movs	r3, #1
 800485a:	e7f0      	b.n	800483e <_svfiprintf_r+0x192>
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	462a      	mov	r2, r5
 8004862:	4b0e      	ldr	r3, [pc, #56]	@ (800489c <_svfiprintf_r+0x1f0>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4638      	mov	r0, r7
 8004868:	f3af 8000 	nop.w
 800486c:	1c42      	adds	r2, r0, #1
 800486e:	4606      	mov	r6, r0
 8004870:	d1d6      	bne.n	8004820 <_svfiprintf_r+0x174>
 8004872:	89ab      	ldrh	r3, [r5, #12]
 8004874:	065b      	lsls	r3, r3, #25
 8004876:	f53f af2d 	bmi.w	80046d4 <_svfiprintf_r+0x28>
 800487a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800487c:	e72c      	b.n	80046d8 <_svfiprintf_r+0x2c>
 800487e:	ab03      	add	r3, sp, #12
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	462a      	mov	r2, r5
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <_svfiprintf_r+0x1f0>)
 8004886:	a904      	add	r1, sp, #16
 8004888:	4638      	mov	r0, r7
 800488a:	f000 f9bb 	bl	8004c04 <_printf_i>
 800488e:	e7ed      	b.n	800486c <_svfiprintf_r+0x1c0>
 8004890:	08005268 	.word	0x08005268
 8004894:	08005272 	.word	0x08005272
 8004898:	00000000 	.word	0x00000000
 800489c:	080045f5 	.word	0x080045f5
 80048a0:	0800526e 	.word	0x0800526e

080048a4 <__sfputc_r>:
 80048a4:	6893      	ldr	r3, [r2, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	b410      	push	{r4}
 80048ac:	6093      	str	r3, [r2, #8]
 80048ae:	da08      	bge.n	80048c2 <__sfputc_r+0x1e>
 80048b0:	6994      	ldr	r4, [r2, #24]
 80048b2:	42a3      	cmp	r3, r4
 80048b4:	db01      	blt.n	80048ba <__sfputc_r+0x16>
 80048b6:	290a      	cmp	r1, #10
 80048b8:	d103      	bne.n	80048c2 <__sfputc_r+0x1e>
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048be:	f7ff bc90 	b.w	80041e2 <__swbuf_r>
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	1c58      	adds	r0, r3, #1
 80048c6:	6010      	str	r0, [r2, #0]
 80048c8:	7019      	strb	r1, [r3, #0]
 80048ca:	4608      	mov	r0, r1
 80048cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <__sfputs_r>:
 80048d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d4:	4606      	mov	r6, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	4614      	mov	r4, r2
 80048da:	18d5      	adds	r5, r2, r3
 80048dc:	42ac      	cmp	r4, r5
 80048de:	d101      	bne.n	80048e4 <__sfputs_r+0x12>
 80048e0:	2000      	movs	r0, #0
 80048e2:	e007      	b.n	80048f4 <__sfputs_r+0x22>
 80048e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e8:	463a      	mov	r2, r7
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7ff ffda 	bl	80048a4 <__sfputc_r>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d1f3      	bne.n	80048dc <__sfputs_r+0xa>
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048f8 <_vfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	460d      	mov	r5, r1
 80048fe:	b09d      	sub	sp, #116	@ 0x74
 8004900:	4614      	mov	r4, r2
 8004902:	4698      	mov	r8, r3
 8004904:	4606      	mov	r6, r0
 8004906:	b118      	cbz	r0, 8004910 <_vfiprintf_r+0x18>
 8004908:	6a03      	ldr	r3, [r0, #32]
 800490a:	b90b      	cbnz	r3, 8004910 <_vfiprintf_r+0x18>
 800490c:	f7ff fb60 	bl	8003fd0 <__sinit>
 8004910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004912:	07d9      	lsls	r1, r3, #31
 8004914:	d405      	bmi.n	8004922 <_vfiprintf_r+0x2a>
 8004916:	89ab      	ldrh	r3, [r5, #12]
 8004918:	059a      	lsls	r2, r3, #22
 800491a:	d402      	bmi.n	8004922 <_vfiprintf_r+0x2a>
 800491c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800491e:	f7ff fd6e 	bl	80043fe <__retarget_lock_acquire_recursive>
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	071b      	lsls	r3, r3, #28
 8004926:	d501      	bpl.n	800492c <_vfiprintf_r+0x34>
 8004928:	692b      	ldr	r3, [r5, #16]
 800492a:	b99b      	cbnz	r3, 8004954 <_vfiprintf_r+0x5c>
 800492c:	4629      	mov	r1, r5
 800492e:	4630      	mov	r0, r6
 8004930:	f7ff fc96 	bl	8004260 <__swsetup_r>
 8004934:	b170      	cbz	r0, 8004954 <_vfiprintf_r+0x5c>
 8004936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004938:	07dc      	lsls	r4, r3, #31
 800493a:	d504      	bpl.n	8004946 <_vfiprintf_r+0x4e>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004940:	b01d      	add	sp, #116	@ 0x74
 8004942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004946:	89ab      	ldrh	r3, [r5, #12]
 8004948:	0598      	lsls	r0, r3, #22
 800494a:	d4f7      	bmi.n	800493c <_vfiprintf_r+0x44>
 800494c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800494e:	f7ff fd57 	bl	8004400 <__retarget_lock_release_recursive>
 8004952:	e7f3      	b.n	800493c <_vfiprintf_r+0x44>
 8004954:	2300      	movs	r3, #0
 8004956:	9309      	str	r3, [sp, #36]	@ 0x24
 8004958:	2320      	movs	r3, #32
 800495a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800495e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004962:	2330      	movs	r3, #48	@ 0x30
 8004964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b14 <_vfiprintf_r+0x21c>
 8004968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800496c:	f04f 0901 	mov.w	r9, #1
 8004970:	4623      	mov	r3, r4
 8004972:	469a      	mov	sl, r3
 8004974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004978:	b10a      	cbz	r2, 800497e <_vfiprintf_r+0x86>
 800497a:	2a25      	cmp	r2, #37	@ 0x25
 800497c:	d1f9      	bne.n	8004972 <_vfiprintf_r+0x7a>
 800497e:	ebba 0b04 	subs.w	fp, sl, r4
 8004982:	d00b      	beq.n	800499c <_vfiprintf_r+0xa4>
 8004984:	465b      	mov	r3, fp
 8004986:	4622      	mov	r2, r4
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff ffa1 	bl	80048d2 <__sfputs_r>
 8004990:	3001      	adds	r0, #1
 8004992:	f000 80a7 	beq.w	8004ae4 <_vfiprintf_r+0x1ec>
 8004996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004998:	445a      	add	r2, fp
 800499a:	9209      	str	r2, [sp, #36]	@ 0x24
 800499c:	f89a 3000 	ldrb.w	r3, [sl]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 809f 	beq.w	8004ae4 <_vfiprintf_r+0x1ec>
 80049a6:	2300      	movs	r3, #0
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049b0:	f10a 0a01 	add.w	sl, sl, #1
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	9307      	str	r3, [sp, #28]
 80049b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80049be:	4654      	mov	r4, sl
 80049c0:	2205      	movs	r2, #5
 80049c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c6:	4853      	ldr	r0, [pc, #332]	@ (8004b14 <_vfiprintf_r+0x21c>)
 80049c8:	f7fb fc22 	bl	8000210 <memchr>
 80049cc:	9a04      	ldr	r2, [sp, #16]
 80049ce:	b9d8      	cbnz	r0, 8004a08 <_vfiprintf_r+0x110>
 80049d0:	06d1      	lsls	r1, r2, #27
 80049d2:	bf44      	itt	mi
 80049d4:	2320      	movmi	r3, #32
 80049d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049da:	0713      	lsls	r3, r2, #28
 80049dc:	bf44      	itt	mi
 80049de:	232b      	movmi	r3, #43	@ 0x2b
 80049e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049e4:	f89a 3000 	ldrb.w	r3, [sl]
 80049e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ea:	d015      	beq.n	8004a18 <_vfiprintf_r+0x120>
 80049ec:	9a07      	ldr	r2, [sp, #28]
 80049ee:	4654      	mov	r4, sl
 80049f0:	2000      	movs	r0, #0
 80049f2:	f04f 0c0a 	mov.w	ip, #10
 80049f6:	4621      	mov	r1, r4
 80049f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fc:	3b30      	subs	r3, #48	@ 0x30
 80049fe:	2b09      	cmp	r3, #9
 8004a00:	d94b      	bls.n	8004a9a <_vfiprintf_r+0x1a2>
 8004a02:	b1b0      	cbz	r0, 8004a32 <_vfiprintf_r+0x13a>
 8004a04:	9207      	str	r2, [sp, #28]
 8004a06:	e014      	b.n	8004a32 <_vfiprintf_r+0x13a>
 8004a08:	eba0 0308 	sub.w	r3, r0, r8
 8004a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	46a2      	mov	sl, r4
 8004a16:	e7d2      	b.n	80049be <_vfiprintf_r+0xc6>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	1d19      	adds	r1, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	9103      	str	r1, [sp, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bfbb      	ittet	lt
 8004a24:	425b      	neglt	r3, r3
 8004a26:	f042 0202 	orrlt.w	r2, r2, #2
 8004a2a:	9307      	strge	r3, [sp, #28]
 8004a2c:	9307      	strlt	r3, [sp, #28]
 8004a2e:	bfb8      	it	lt
 8004a30:	9204      	strlt	r2, [sp, #16]
 8004a32:	7823      	ldrb	r3, [r4, #0]
 8004a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a36:	d10a      	bne.n	8004a4e <_vfiprintf_r+0x156>
 8004a38:	7863      	ldrb	r3, [r4, #1]
 8004a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a3c:	d132      	bne.n	8004aa4 <_vfiprintf_r+0x1ac>
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	1d1a      	adds	r2, r3, #4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	9203      	str	r2, [sp, #12]
 8004a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a4a:	3402      	adds	r4, #2
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b24 <_vfiprintf_r+0x22c>
 8004a52:	7821      	ldrb	r1, [r4, #0]
 8004a54:	2203      	movs	r2, #3
 8004a56:	4650      	mov	r0, sl
 8004a58:	f7fb fbda 	bl	8000210 <memchr>
 8004a5c:	b138      	cbz	r0, 8004a6e <_vfiprintf_r+0x176>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	eba0 000a 	sub.w	r0, r0, sl
 8004a64:	2240      	movs	r2, #64	@ 0x40
 8004a66:	4082      	lsls	r2, r0
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	3401      	adds	r4, #1
 8004a6c:	9304      	str	r3, [sp, #16]
 8004a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a72:	4829      	ldr	r0, [pc, #164]	@ (8004b18 <_vfiprintf_r+0x220>)
 8004a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a78:	2206      	movs	r2, #6
 8004a7a:	f7fb fbc9 	bl	8000210 <memchr>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d03f      	beq.n	8004b02 <_vfiprintf_r+0x20a>
 8004a82:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <_vfiprintf_r+0x224>)
 8004a84:	bb1b      	cbnz	r3, 8004ace <_vfiprintf_r+0x1d6>
 8004a86:	9b03      	ldr	r3, [sp, #12]
 8004a88:	3307      	adds	r3, #7
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	3308      	adds	r3, #8
 8004a90:	9303      	str	r3, [sp, #12]
 8004a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a94:	443b      	add	r3, r7
 8004a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a98:	e76a      	b.n	8004970 <_vfiprintf_r+0x78>
 8004a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e7a8      	b.n	80049f6 <_vfiprintf_r+0xfe>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	3401      	adds	r4, #1
 8004aa8:	9305      	str	r3, [sp, #20]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f04f 0c0a 	mov.w	ip, #10
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab6:	3a30      	subs	r2, #48	@ 0x30
 8004ab8:	2a09      	cmp	r2, #9
 8004aba:	d903      	bls.n	8004ac4 <_vfiprintf_r+0x1cc>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0c6      	beq.n	8004a4e <_vfiprintf_r+0x156>
 8004ac0:	9105      	str	r1, [sp, #20]
 8004ac2:	e7c4      	b.n	8004a4e <_vfiprintf_r+0x156>
 8004ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac8:	4604      	mov	r4, r0
 8004aca:	2301      	movs	r3, #1
 8004acc:	e7f0      	b.n	8004ab0 <_vfiprintf_r+0x1b8>
 8004ace:	ab03      	add	r3, sp, #12
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	462a      	mov	r2, r5
 8004ad4:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <_vfiprintf_r+0x228>)
 8004ad6:	a904      	add	r1, sp, #16
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f3af 8000 	nop.w
 8004ade:	4607      	mov	r7, r0
 8004ae0:	1c78      	adds	r0, r7, #1
 8004ae2:	d1d6      	bne.n	8004a92 <_vfiprintf_r+0x19a>
 8004ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ae6:	07d9      	lsls	r1, r3, #31
 8004ae8:	d405      	bmi.n	8004af6 <_vfiprintf_r+0x1fe>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d402      	bmi.n	8004af6 <_vfiprintf_r+0x1fe>
 8004af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004af2:	f7ff fc85 	bl	8004400 <__retarget_lock_release_recursive>
 8004af6:	89ab      	ldrh	r3, [r5, #12]
 8004af8:	065b      	lsls	r3, r3, #25
 8004afa:	f53f af1f 	bmi.w	800493c <_vfiprintf_r+0x44>
 8004afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b00:	e71e      	b.n	8004940 <_vfiprintf_r+0x48>
 8004b02:	ab03      	add	r3, sp, #12
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	462a      	mov	r2, r5
 8004b08:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <_vfiprintf_r+0x228>)
 8004b0a:	a904      	add	r1, sp, #16
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	f000 f879 	bl	8004c04 <_printf_i>
 8004b12:	e7e4      	b.n	8004ade <_vfiprintf_r+0x1e6>
 8004b14:	08005268 	.word	0x08005268
 8004b18:	08005272 	.word	0x08005272
 8004b1c:	00000000 	.word	0x00000000
 8004b20:	080048d3 	.word	0x080048d3
 8004b24:	0800526e 	.word	0x0800526e

08004b28 <_printf_common>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	4698      	mov	r8, r3
 8004b30:	688a      	ldr	r2, [r1, #8]
 8004b32:	690b      	ldr	r3, [r1, #16]
 8004b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	bfb8      	it	lt
 8004b3c:	4613      	movlt	r3, r2
 8004b3e:	6033      	str	r3, [r6, #0]
 8004b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b44:	4607      	mov	r7, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	b10a      	cbz	r2, 8004b4e <_printf_common+0x26>
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	0699      	lsls	r1, r3, #26
 8004b52:	bf42      	ittt	mi
 8004b54:	6833      	ldrmi	r3, [r6, #0]
 8004b56:	3302      	addmi	r3, #2
 8004b58:	6033      	strmi	r3, [r6, #0]
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	f015 0506 	ands.w	r5, r5, #6
 8004b60:	d106      	bne.n	8004b70 <_printf_common+0x48>
 8004b62:	f104 0a19 	add.w	sl, r4, #25
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	6832      	ldr	r2, [r6, #0]
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	dc26      	bgt.n	8004bbe <_printf_common+0x96>
 8004b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	3b00      	subs	r3, #0
 8004b78:	bf18      	it	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	0692      	lsls	r2, r2, #26
 8004b7e:	d42b      	bmi.n	8004bd8 <_printf_common+0xb0>
 8004b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b84:	4641      	mov	r1, r8
 8004b86:	4638      	mov	r0, r7
 8004b88:	47c8      	blx	r9
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d01e      	beq.n	8004bcc <_printf_common+0xa4>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	bf02      	ittt	eq
 8004b9a:	68e5      	ldreq	r5, [r4, #12]
 8004b9c:	6833      	ldreq	r3, [r6, #0]
 8004b9e:	1aed      	subeq	r5, r5, r3
 8004ba0:	68a3      	ldr	r3, [r4, #8]
 8004ba2:	bf0c      	ite	eq
 8004ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba8:	2500      	movne	r5, #0
 8004baa:	4293      	cmp	r3, r2
 8004bac:	bfc4      	itt	gt
 8004bae:	1a9b      	subgt	r3, r3, r2
 8004bb0:	18ed      	addgt	r5, r5, r3
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	341a      	adds	r4, #26
 8004bb6:	42b5      	cmp	r5, r6
 8004bb8:	d11a      	bne.n	8004bf0 <_printf_common+0xc8>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e008      	b.n	8004bd0 <_printf_common+0xa8>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	47c8      	blx	r9
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d103      	bne.n	8004bd4 <_printf_common+0xac>
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd4:	3501      	adds	r5, #1
 8004bd6:	e7c6      	b.n	8004b66 <_printf_common+0x3e>
 8004bd8:	18e1      	adds	r1, r4, r3
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	2030      	movs	r0, #48	@ 0x30
 8004bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004be2:	4422      	add	r2, r4
 8004be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bec:	3302      	adds	r3, #2
 8004bee:	e7c7      	b.n	8004b80 <_printf_common+0x58>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	47c8      	blx	r9
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d0e6      	beq.n	8004bcc <_printf_common+0xa4>
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7d9      	b.n	8004bb6 <_printf_common+0x8e>
	...

08004c04 <_printf_i>:
 8004c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	7e0f      	ldrb	r7, [r1, #24]
 8004c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c0c:	2f78      	cmp	r7, #120	@ 0x78
 8004c0e:	4691      	mov	r9, r2
 8004c10:	4680      	mov	r8, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	469a      	mov	sl, r3
 8004c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c1a:	d807      	bhi.n	8004c2c <_printf_i+0x28>
 8004c1c:	2f62      	cmp	r7, #98	@ 0x62
 8004c1e:	d80a      	bhi.n	8004c36 <_printf_i+0x32>
 8004c20:	2f00      	cmp	r7, #0
 8004c22:	f000 80d2 	beq.w	8004dca <_printf_i+0x1c6>
 8004c26:	2f58      	cmp	r7, #88	@ 0x58
 8004c28:	f000 80b9 	beq.w	8004d9e <_printf_i+0x19a>
 8004c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c34:	e03a      	b.n	8004cac <_printf_i+0xa8>
 8004c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c3a:	2b15      	cmp	r3, #21
 8004c3c:	d8f6      	bhi.n	8004c2c <_printf_i+0x28>
 8004c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c44 <_printf_i+0x40>)
 8004c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004cb1 	.word	0x08004cb1
 8004c4c:	08004c2d 	.word	0x08004c2d
 8004c50:	08004c2d 	.word	0x08004c2d
 8004c54:	08004c2d 	.word	0x08004c2d
 8004c58:	08004c2d 	.word	0x08004c2d
 8004c5c:	08004cb1 	.word	0x08004cb1
 8004c60:	08004c2d 	.word	0x08004c2d
 8004c64:	08004c2d 	.word	0x08004c2d
 8004c68:	08004c2d 	.word	0x08004c2d
 8004c6c:	08004c2d 	.word	0x08004c2d
 8004c70:	08004db1 	.word	0x08004db1
 8004c74:	08004cdb 	.word	0x08004cdb
 8004c78:	08004d6b 	.word	0x08004d6b
 8004c7c:	08004c2d 	.word	0x08004c2d
 8004c80:	08004c2d 	.word	0x08004c2d
 8004c84:	08004dd3 	.word	0x08004dd3
 8004c88:	08004c2d 	.word	0x08004c2d
 8004c8c:	08004cdb 	.word	0x08004cdb
 8004c90:	08004c2d 	.word	0x08004c2d
 8004c94:	08004c2d 	.word	0x08004c2d
 8004c98:	08004d73 	.word	0x08004d73
 8004c9c:	6833      	ldr	r3, [r6, #0]
 8004c9e:	1d1a      	adds	r2, r3, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6032      	str	r2, [r6, #0]
 8004ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cac:	2301      	movs	r3, #1
 8004cae:	e09d      	b.n	8004dec <_printf_i+0x1e8>
 8004cb0:	6833      	ldr	r3, [r6, #0]
 8004cb2:	6820      	ldr	r0, [r4, #0]
 8004cb4:	1d19      	adds	r1, r3, #4
 8004cb6:	6031      	str	r1, [r6, #0]
 8004cb8:	0606      	lsls	r6, r0, #24
 8004cba:	d501      	bpl.n	8004cc0 <_printf_i+0xbc>
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	e003      	b.n	8004cc8 <_printf_i+0xc4>
 8004cc0:	0645      	lsls	r5, r0, #25
 8004cc2:	d5fb      	bpl.n	8004cbc <_printf_i+0xb8>
 8004cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	da03      	bge.n	8004cd4 <_printf_i+0xd0>
 8004ccc:	232d      	movs	r3, #45	@ 0x2d
 8004cce:	426d      	negs	r5, r5
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd4:	4859      	ldr	r0, [pc, #356]	@ (8004e3c <_printf_i+0x238>)
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e011      	b.n	8004cfe <_printf_i+0xfa>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	0608      	lsls	r0, r1, #24
 8004ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ce4:	d402      	bmi.n	8004cec <_printf_i+0xe8>
 8004ce6:	0649      	lsls	r1, r1, #25
 8004ce8:	bf48      	it	mi
 8004cea:	b2ad      	uxthmi	r5, r5
 8004cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cee:	4853      	ldr	r0, [pc, #332]	@ (8004e3c <_printf_i+0x238>)
 8004cf0:	6033      	str	r3, [r6, #0]
 8004cf2:	bf14      	ite	ne
 8004cf4:	230a      	movne	r3, #10
 8004cf6:	2308      	moveq	r3, #8
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cfe:	6866      	ldr	r6, [r4, #4]
 8004d00:	60a6      	str	r6, [r4, #8]
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	bfa2      	ittt	ge
 8004d06:	6821      	ldrge	r1, [r4, #0]
 8004d08:	f021 0104 	bicge.w	r1, r1, #4
 8004d0c:	6021      	strge	r1, [r4, #0]
 8004d0e:	b90d      	cbnz	r5, 8004d14 <_printf_i+0x110>
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	d04b      	beq.n	8004dac <_printf_i+0x1a8>
 8004d14:	4616      	mov	r6, r2
 8004d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d1e:	5dc7      	ldrb	r7, [r0, r7]
 8004d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d24:	462f      	mov	r7, r5
 8004d26:	42bb      	cmp	r3, r7
 8004d28:	460d      	mov	r5, r1
 8004d2a:	d9f4      	bls.n	8004d16 <_printf_i+0x112>
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d10b      	bne.n	8004d48 <_printf_i+0x144>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	07df      	lsls	r7, r3, #31
 8004d34:	d508      	bpl.n	8004d48 <_printf_i+0x144>
 8004d36:	6923      	ldr	r3, [r4, #16]
 8004d38:	6861      	ldr	r1, [r4, #4]
 8004d3a:	4299      	cmp	r1, r3
 8004d3c:	bfde      	ittt	le
 8004d3e:	2330      	movle	r3, #48	@ 0x30
 8004d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d48:	1b92      	subs	r2, r2, r6
 8004d4a:	6122      	str	r2, [r4, #16]
 8004d4c:	f8cd a000 	str.w	sl, [sp]
 8004d50:	464b      	mov	r3, r9
 8004d52:	aa03      	add	r2, sp, #12
 8004d54:	4621      	mov	r1, r4
 8004d56:	4640      	mov	r0, r8
 8004d58:	f7ff fee6 	bl	8004b28 <_printf_common>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d14a      	bne.n	8004df6 <_printf_i+0x1f2>
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d64:	b004      	add	sp, #16
 8004d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f043 0320 	orr.w	r3, r3, #32
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	4833      	ldr	r0, [pc, #204]	@ (8004e40 <_printf_i+0x23c>)
 8004d74:	2778      	movs	r7, #120	@ 0x78
 8004d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	6831      	ldr	r1, [r6, #0]
 8004d7e:	061f      	lsls	r7, r3, #24
 8004d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d84:	d402      	bmi.n	8004d8c <_printf_i+0x188>
 8004d86:	065f      	lsls	r7, r3, #25
 8004d88:	bf48      	it	mi
 8004d8a:	b2ad      	uxthmi	r5, r5
 8004d8c:	6031      	str	r1, [r6, #0]
 8004d8e:	07d9      	lsls	r1, r3, #31
 8004d90:	bf44      	itt	mi
 8004d92:	f043 0320 	orrmi.w	r3, r3, #32
 8004d96:	6023      	strmi	r3, [r4, #0]
 8004d98:	b11d      	cbz	r5, 8004da2 <_printf_i+0x19e>
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	e7ac      	b.n	8004cf8 <_printf_i+0xf4>
 8004d9e:	4827      	ldr	r0, [pc, #156]	@ (8004e3c <_printf_i+0x238>)
 8004da0:	e7e9      	b.n	8004d76 <_printf_i+0x172>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f023 0320 	bic.w	r3, r3, #32
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	e7f6      	b.n	8004d9a <_printf_i+0x196>
 8004dac:	4616      	mov	r6, r2
 8004dae:	e7bd      	b.n	8004d2c <_printf_i+0x128>
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	6825      	ldr	r5, [r4, #0]
 8004db4:	6961      	ldr	r1, [r4, #20]
 8004db6:	1d18      	adds	r0, r3, #4
 8004db8:	6030      	str	r0, [r6, #0]
 8004dba:	062e      	lsls	r6, r5, #24
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	d501      	bpl.n	8004dc4 <_printf_i+0x1c0>
 8004dc0:	6019      	str	r1, [r3, #0]
 8004dc2:	e002      	b.n	8004dca <_printf_i+0x1c6>
 8004dc4:	0668      	lsls	r0, r5, #25
 8004dc6:	d5fb      	bpl.n	8004dc0 <_printf_i+0x1bc>
 8004dc8:	8019      	strh	r1, [r3, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	4616      	mov	r6, r2
 8004dd0:	e7bc      	b.n	8004d4c <_printf_i+0x148>
 8004dd2:	6833      	ldr	r3, [r6, #0]
 8004dd4:	1d1a      	adds	r2, r3, #4
 8004dd6:	6032      	str	r2, [r6, #0]
 8004dd8:	681e      	ldr	r6, [r3, #0]
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7fb fa16 	bl	8000210 <memchr>
 8004de4:	b108      	cbz	r0, 8004dea <_printf_i+0x1e6>
 8004de6:	1b80      	subs	r0, r0, r6
 8004de8:	6060      	str	r0, [r4, #4]
 8004dea:	6863      	ldr	r3, [r4, #4]
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	2300      	movs	r3, #0
 8004df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004df4:	e7aa      	b.n	8004d4c <_printf_i+0x148>
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	47d0      	blx	sl
 8004e00:	3001      	adds	r0, #1
 8004e02:	d0ad      	beq.n	8004d60 <_printf_i+0x15c>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	079b      	lsls	r3, r3, #30
 8004e08:	d413      	bmi.n	8004e32 <_printf_i+0x22e>
 8004e0a:	68e0      	ldr	r0, [r4, #12]
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	4298      	cmp	r0, r3
 8004e10:	bfb8      	it	lt
 8004e12:	4618      	movlt	r0, r3
 8004e14:	e7a6      	b.n	8004d64 <_printf_i+0x160>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4632      	mov	r2, r6
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	47d0      	blx	sl
 8004e20:	3001      	adds	r0, #1
 8004e22:	d09d      	beq.n	8004d60 <_printf_i+0x15c>
 8004e24:	3501      	adds	r5, #1
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	9903      	ldr	r1, [sp, #12]
 8004e2a:	1a5b      	subs	r3, r3, r1
 8004e2c:	42ab      	cmp	r3, r5
 8004e2e:	dcf2      	bgt.n	8004e16 <_printf_i+0x212>
 8004e30:	e7eb      	b.n	8004e0a <_printf_i+0x206>
 8004e32:	2500      	movs	r5, #0
 8004e34:	f104 0619 	add.w	r6, r4, #25
 8004e38:	e7f5      	b.n	8004e26 <_printf_i+0x222>
 8004e3a:	bf00      	nop
 8004e3c:	08005279 	.word	0x08005279
 8004e40:	0800528a 	.word	0x0800528a

08004e44 <__sflush_r>:
 8004e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4c:	0716      	lsls	r6, r2, #28
 8004e4e:	4605      	mov	r5, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	d454      	bmi.n	8004efe <__sflush_r+0xba>
 8004e54:	684b      	ldr	r3, [r1, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dc02      	bgt.n	8004e60 <__sflush_r+0x1c>
 8004e5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	dd48      	ble.n	8004ef2 <__sflush_r+0xae>
 8004e60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e62:	2e00      	cmp	r6, #0
 8004e64:	d045      	beq.n	8004ef2 <__sflush_r+0xae>
 8004e66:	2300      	movs	r3, #0
 8004e68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e6c:	682f      	ldr	r7, [r5, #0]
 8004e6e:	6a21      	ldr	r1, [r4, #32]
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	d030      	beq.n	8004ed6 <__sflush_r+0x92>
 8004e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	0759      	lsls	r1, r3, #29
 8004e7a:	d505      	bpl.n	8004e88 <__sflush_r+0x44>
 8004e7c:	6863      	ldr	r3, [r4, #4]
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e82:	b10b      	cbz	r3, 8004e88 <__sflush_r+0x44>
 8004e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e8c:	6a21      	ldr	r1, [r4, #32]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b0      	blx	r6
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	d106      	bne.n	8004ea6 <__sflush_r+0x62>
 8004e98:	6829      	ldr	r1, [r5, #0]
 8004e9a:	291d      	cmp	r1, #29
 8004e9c:	d82b      	bhi.n	8004ef6 <__sflush_r+0xb2>
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f48 <__sflush_r+0x104>)
 8004ea0:	410a      	asrs	r2, r1
 8004ea2:	07d6      	lsls	r6, r2, #31
 8004ea4:	d427      	bmi.n	8004ef6 <__sflush_r+0xb2>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6062      	str	r2, [r4, #4]
 8004eaa:	04d9      	lsls	r1, r3, #19
 8004eac:	6922      	ldr	r2, [r4, #16]
 8004eae:	6022      	str	r2, [r4, #0]
 8004eb0:	d504      	bpl.n	8004ebc <__sflush_r+0x78>
 8004eb2:	1c42      	adds	r2, r0, #1
 8004eb4:	d101      	bne.n	8004eba <__sflush_r+0x76>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	b903      	cbnz	r3, 8004ebc <__sflush_r+0x78>
 8004eba:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ebe:	602f      	str	r7, [r5, #0]
 8004ec0:	b1b9      	cbz	r1, 8004ef2 <__sflush_r+0xae>
 8004ec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	d002      	beq.n	8004ed0 <__sflush_r+0x8c>
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f7ff fa9a 	bl	8004404 <_free_r>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ed4:	e00d      	b.n	8004ef2 <__sflush_r+0xae>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b0      	blx	r6
 8004edc:	4602      	mov	r2, r0
 8004ede:	1c50      	adds	r0, r2, #1
 8004ee0:	d1c9      	bne.n	8004e76 <__sflush_r+0x32>
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0c6      	beq.n	8004e76 <__sflush_r+0x32>
 8004ee8:	2b1d      	cmp	r3, #29
 8004eea:	d001      	beq.n	8004ef0 <__sflush_r+0xac>
 8004eec:	2b16      	cmp	r3, #22
 8004eee:	d11e      	bne.n	8004f2e <__sflush_r+0xea>
 8004ef0:	602f      	str	r7, [r5, #0]
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e022      	b.n	8004f3c <__sflush_r+0xf8>
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	e01b      	b.n	8004f36 <__sflush_r+0xf2>
 8004efe:	690f      	ldr	r7, [r1, #16]
 8004f00:	2f00      	cmp	r7, #0
 8004f02:	d0f6      	beq.n	8004ef2 <__sflush_r+0xae>
 8004f04:	0793      	lsls	r3, r2, #30
 8004f06:	680e      	ldr	r6, [r1, #0]
 8004f08:	bf08      	it	eq
 8004f0a:	694b      	ldreq	r3, [r1, #20]
 8004f0c:	600f      	str	r7, [r1, #0]
 8004f0e:	bf18      	it	ne
 8004f10:	2300      	movne	r3, #0
 8004f12:	eba6 0807 	sub.w	r8, r6, r7
 8004f16:	608b      	str	r3, [r1, #8]
 8004f18:	f1b8 0f00 	cmp.w	r8, #0
 8004f1c:	dde9      	ble.n	8004ef2 <__sflush_r+0xae>
 8004f1e:	6a21      	ldr	r1, [r4, #32]
 8004f20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f22:	4643      	mov	r3, r8
 8004f24:	463a      	mov	r2, r7
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b0      	blx	r6
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	dc08      	bgt.n	8004f40 <__sflush_r+0xfc>
 8004f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	4407      	add	r7, r0
 8004f42:	eba8 0800 	sub.w	r8, r8, r0
 8004f46:	e7e7      	b.n	8004f18 <__sflush_r+0xd4>
 8004f48:	dfbffffe 	.word	0xdfbffffe

08004f4c <_fflush_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	690b      	ldr	r3, [r1, #16]
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	b913      	cbnz	r3, 8004f5c <_fflush_r+0x10>
 8004f56:	2500      	movs	r5, #0
 8004f58:	4628      	mov	r0, r5
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	b118      	cbz	r0, 8004f66 <_fflush_r+0x1a>
 8004f5e:	6a03      	ldr	r3, [r0, #32]
 8004f60:	b90b      	cbnz	r3, 8004f66 <_fflush_r+0x1a>
 8004f62:	f7ff f835 	bl	8003fd0 <__sinit>
 8004f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f3      	beq.n	8004f56 <_fflush_r+0xa>
 8004f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f70:	07d0      	lsls	r0, r2, #31
 8004f72:	d404      	bmi.n	8004f7e <_fflush_r+0x32>
 8004f74:	0599      	lsls	r1, r3, #22
 8004f76:	d402      	bmi.n	8004f7e <_fflush_r+0x32>
 8004f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f7a:	f7ff fa40 	bl	80043fe <__retarget_lock_acquire_recursive>
 8004f7e:	4628      	mov	r0, r5
 8004f80:	4621      	mov	r1, r4
 8004f82:	f7ff ff5f 	bl	8004e44 <__sflush_r>
 8004f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f88:	07da      	lsls	r2, r3, #31
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	d4e4      	bmi.n	8004f58 <_fflush_r+0xc>
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	059b      	lsls	r3, r3, #22
 8004f92:	d4e1      	bmi.n	8004f58 <_fflush_r+0xc>
 8004f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f96:	f7ff fa33 	bl	8004400 <__retarget_lock_release_recursive>
 8004f9a:	e7dd      	b.n	8004f58 <_fflush_r+0xc>

08004f9c <__swhatbuf_r>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	b096      	sub	sp, #88	@ 0x58
 8004fa8:	4615      	mov	r5, r2
 8004faa:	461e      	mov	r6, r3
 8004fac:	da0d      	bge.n	8004fca <__swhatbuf_r+0x2e>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004fb4:	f04f 0100 	mov.w	r1, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2340      	movne	r3, #64	@ 0x40
 8004fbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	6031      	str	r1, [r6, #0]
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	b016      	add	sp, #88	@ 0x58
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	466a      	mov	r2, sp
 8004fcc:	f000 f862 	bl	8005094 <_fstat_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	dbec      	blt.n	8004fae <__swhatbuf_r+0x12>
 8004fd4:	9901      	ldr	r1, [sp, #4]
 8004fd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fde:	4259      	negs	r1, r3
 8004fe0:	4159      	adcs	r1, r3
 8004fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fe6:	e7eb      	b.n	8004fc0 <__swhatbuf_r+0x24>

08004fe8 <__smakebuf_r>:
 8004fe8:	898b      	ldrh	r3, [r1, #12]
 8004fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fec:	079d      	lsls	r5, r3, #30
 8004fee:	4606      	mov	r6, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	d507      	bpl.n	8005004 <__smakebuf_r+0x1c>
 8004ff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	6163      	str	r3, [r4, #20]
 8005000:	b003      	add	sp, #12
 8005002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005004:	ab01      	add	r3, sp, #4
 8005006:	466a      	mov	r2, sp
 8005008:	f7ff ffc8 	bl	8004f9c <__swhatbuf_r>
 800500c:	9f00      	ldr	r7, [sp, #0]
 800500e:	4605      	mov	r5, r0
 8005010:	4639      	mov	r1, r7
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff fa62 	bl	80044dc <_malloc_r>
 8005018:	b948      	cbnz	r0, 800502e <__smakebuf_r+0x46>
 800501a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800501e:	059a      	lsls	r2, r3, #22
 8005020:	d4ee      	bmi.n	8005000 <__smakebuf_r+0x18>
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	f043 0302 	orr.w	r3, r3, #2
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	e7e2      	b.n	8004ff4 <__smakebuf_r+0xc>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	6020      	str	r0, [r4, #0]
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	9b01      	ldr	r3, [sp, #4]
 800503a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800503e:	b15b      	cbz	r3, 8005058 <__smakebuf_r+0x70>
 8005040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f837 	bl	80050b8 <_isatty_r>
 800504a:	b128      	cbz	r0, 8005058 <__smakebuf_r+0x70>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	431d      	orrs	r5, r3
 800505c:	81a5      	strh	r5, [r4, #12]
 800505e:	e7cf      	b.n	8005000 <__smakebuf_r+0x18>

08005060 <memmove>:
 8005060:	4288      	cmp	r0, r1
 8005062:	b510      	push	{r4, lr}
 8005064:	eb01 0402 	add.w	r4, r1, r2
 8005068:	d902      	bls.n	8005070 <memmove+0x10>
 800506a:	4284      	cmp	r4, r0
 800506c:	4623      	mov	r3, r4
 800506e:	d807      	bhi.n	8005080 <memmove+0x20>
 8005070:	1e43      	subs	r3, r0, #1
 8005072:	42a1      	cmp	r1, r4
 8005074:	d008      	beq.n	8005088 <memmove+0x28>
 8005076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507e:	e7f8      	b.n	8005072 <memmove+0x12>
 8005080:	4402      	add	r2, r0
 8005082:	4601      	mov	r1, r0
 8005084:	428a      	cmp	r2, r1
 8005086:	d100      	bne.n	800508a <memmove+0x2a>
 8005088:	bd10      	pop	{r4, pc}
 800508a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005092:	e7f7      	b.n	8005084 <memmove+0x24>

08005094 <_fstat_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4d07      	ldr	r5, [pc, #28]	@ (80050b4 <_fstat_r+0x20>)
 8005098:	2300      	movs	r3, #0
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	f7fb fd10 	bl	8000ac6 <_fstat>
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	d102      	bne.n	80050b0 <_fstat_r+0x1c>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	b103      	cbz	r3, 80050b0 <_fstat_r+0x1c>
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	bd38      	pop	{r3, r4, r5, pc}
 80050b2:	bf00      	nop
 80050b4:	20000920 	.word	0x20000920

080050b8 <_isatty_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d06      	ldr	r5, [pc, #24]	@ (80050d4 <_isatty_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	f7fb fd0f 	bl	8000ae6 <_isatty>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_isatty_r+0x1a>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_isatty_r+0x1a>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000920 	.word	0x20000920

080050d8 <_sbrk_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d06      	ldr	r5, [pc, #24]	@ (80050f4 <_sbrk_r+0x1c>)
 80050dc:	2300      	movs	r3, #0
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fb fd18 	bl	8000b18 <_sbrk>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_sbrk_r+0x1a>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_sbrk_r+0x1a>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20000920 	.word	0x20000920

080050f8 <memcpy>:
 80050f8:	440a      	add	r2, r1
 80050fa:	4291      	cmp	r1, r2
 80050fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005100:	d100      	bne.n	8005104 <memcpy+0xc>
 8005102:	4770      	bx	lr
 8005104:	b510      	push	{r4, lr}
 8005106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800510a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800510e:	4291      	cmp	r1, r2
 8005110:	d1f9      	bne.n	8005106 <memcpy+0xe>
 8005112:	bd10      	pop	{r4, pc}

08005114 <_realloc_r>:
 8005114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	4680      	mov	r8, r0
 800511a:	4615      	mov	r5, r2
 800511c:	460c      	mov	r4, r1
 800511e:	b921      	cbnz	r1, 800512a <_realloc_r+0x16>
 8005120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	4611      	mov	r1, r2
 8005126:	f7ff b9d9 	b.w	80044dc <_malloc_r>
 800512a:	b92a      	cbnz	r2, 8005138 <_realloc_r+0x24>
 800512c:	f7ff f96a 	bl	8004404 <_free_r>
 8005130:	2400      	movs	r4, #0
 8005132:	4620      	mov	r0, r4
 8005134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005138:	f000 f81a 	bl	8005170 <_malloc_usable_size_r>
 800513c:	4285      	cmp	r5, r0
 800513e:	4606      	mov	r6, r0
 8005140:	d802      	bhi.n	8005148 <_realloc_r+0x34>
 8005142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005146:	d8f4      	bhi.n	8005132 <_realloc_r+0x1e>
 8005148:	4629      	mov	r1, r5
 800514a:	4640      	mov	r0, r8
 800514c:	f7ff f9c6 	bl	80044dc <_malloc_r>
 8005150:	4607      	mov	r7, r0
 8005152:	2800      	cmp	r0, #0
 8005154:	d0ec      	beq.n	8005130 <_realloc_r+0x1c>
 8005156:	42b5      	cmp	r5, r6
 8005158:	462a      	mov	r2, r5
 800515a:	4621      	mov	r1, r4
 800515c:	bf28      	it	cs
 800515e:	4632      	movcs	r2, r6
 8005160:	f7ff ffca 	bl	80050f8 <memcpy>
 8005164:	4621      	mov	r1, r4
 8005166:	4640      	mov	r0, r8
 8005168:	f7ff f94c 	bl	8004404 <_free_r>
 800516c:	463c      	mov	r4, r7
 800516e:	e7e0      	b.n	8005132 <_realloc_r+0x1e>

08005170 <_malloc_usable_size_r>:
 8005170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005174:	1f18      	subs	r0, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	bfbc      	itt	lt
 800517a:	580b      	ldrlt	r3, [r1, r0]
 800517c:	18c0      	addlt	r0, r0, r3
 800517e:	4770      	bx	lr

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
